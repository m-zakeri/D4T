# Generated from /media/sadegh/Data/sadegh/iust/compiler/compiler projects/main_project/grammars/JavaParserLabeled.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,111,1430,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,1,0,3,0,212,8,0,1,0,5,0,215,8,0,10,0,12,0,218,9,0,1,
        0,5,0,221,8,0,10,0,12,0,224,9,0,1,0,1,0,1,1,5,1,229,8,1,10,1,12,
        1,232,9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,240,8,2,1,2,1,2,1,2,3,2,245,
        8,2,1,2,1,2,1,3,5,3,250,8,3,10,3,12,3,253,9,3,1,3,1,3,1,3,1,3,3,
        3,259,8,3,1,3,3,3,262,8,3,1,4,1,4,1,4,1,4,1,4,3,4,269,8,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,279,8,5,1,6,1,6,3,6,283,8,6,1,7,1,
        7,1,7,3,7,288,8,7,1,7,1,7,3,7,292,8,7,1,7,1,7,3,7,296,8,7,1,7,1,
        7,1,8,1,8,1,8,1,8,5,8,304,8,8,10,8,12,8,307,9,8,1,8,1,8,1,9,5,9,
        312,8,9,10,9,12,9,315,9,9,1,9,1,9,1,9,5,9,320,8,9,10,9,12,9,323,
        9,9,1,9,3,9,326,8,9,1,10,1,10,1,10,5,10,331,8,10,10,10,12,10,334,
        9,10,1,11,1,11,1,11,1,11,3,11,340,8,11,1,11,1,11,3,11,344,8,11,1,
        11,3,11,347,8,11,1,11,3,11,350,8,11,1,11,1,11,1,12,1,12,1,12,5,12,
        357,8,12,10,12,12,12,360,9,12,1,13,5,13,363,8,13,10,13,12,13,366,
        9,13,1,13,1,13,3,13,370,8,13,1,13,3,13,373,8,13,1,14,1,14,5,14,377,
        8,14,10,14,12,14,380,9,14,1,15,1,15,1,15,3,15,385,8,15,1,15,1,15,
        3,15,389,8,15,1,15,1,15,1,16,1,16,5,16,395,8,16,10,16,12,16,398,
        9,16,1,16,1,16,1,17,1,17,5,17,404,8,17,10,17,12,17,407,9,17,1,17,
        1,17,1,18,1,18,3,18,413,8,18,1,18,1,18,5,18,417,8,18,10,18,12,18,
        420,9,18,1,18,3,18,423,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,3,19,434,8,19,1,20,1,20,1,20,1,20,1,20,5,20,441,8,20,10,
        20,12,20,444,9,20,1,20,1,20,3,20,448,8,20,1,20,1,20,1,21,1,21,3,
        21,454,8,21,1,22,1,22,3,22,458,8,22,1,23,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,3,25,470,8,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,27,5,27,479,8,27,10,27,12,27,482,9,27,1,27,1,27,3,27,486,8,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,495,8,28,1,29,1,29,1,29,
        1,29,5,29,501,8,29,10,29,12,29,504,9,29,1,29,1,29,1,30,1,30,1,30,
        5,30,511,8,30,10,30,12,30,514,9,30,1,30,1,30,1,30,1,31,5,31,520,
        8,31,10,31,12,31,523,9,31,1,31,1,31,1,31,5,31,528,8,31,10,31,12,
        31,531,9,31,1,31,1,31,3,31,535,8,31,1,31,1,31,1,31,1,31,5,31,541,
        8,31,10,31,12,31,544,9,31,1,31,1,31,3,31,548,8,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,32,1,32,3,32,558,8,32,1,33,1,33,1,33,1,34,1,34,
        1,34,5,34,566,8,34,10,34,12,34,569,9,34,1,35,1,35,1,35,3,35,574,
        8,35,1,36,1,36,1,36,5,36,579,8,36,10,36,12,36,582,9,36,1,37,1,37,
        3,37,586,8,37,1,38,1,38,1,38,1,38,5,38,592,8,38,10,38,12,38,595,
        9,38,1,38,3,38,598,8,38,3,38,600,8,38,1,38,1,38,1,39,1,39,3,39,606,
        8,39,1,39,1,39,1,39,3,39,611,8,39,5,39,613,8,39,10,39,12,39,616,
        9,39,1,40,1,40,5,40,620,8,40,10,40,12,40,623,9,40,1,40,1,40,1,40,
        3,40,628,8,40,3,40,630,8,40,1,41,1,41,1,41,5,41,635,8,41,10,41,12,
        41,638,9,41,1,42,1,42,3,42,642,8,42,1,42,1,42,1,43,1,43,1,43,5,43,
        649,8,43,10,43,12,43,652,9,43,1,43,1,43,3,43,656,8,43,1,43,3,43,
        659,8,43,1,44,5,44,662,8,44,10,44,12,44,665,9,44,1,44,1,44,1,44,
        1,45,5,45,671,8,45,10,45,12,45,674,9,45,1,45,1,45,5,45,678,8,45,
        10,45,12,45,681,9,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,689,8,46,
        10,46,12,46,692,9,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,700,8,47,
        1,48,1,48,1,49,1,49,1,50,1,50,5,50,708,8,50,10,50,12,50,711,9,50,
        1,50,1,50,1,50,1,51,1,51,1,51,3,51,719,8,51,1,51,1,51,1,51,3,51,
        724,8,51,1,51,3,51,727,8,51,1,52,1,52,1,52,5,52,732,8,52,10,52,12,
        52,735,9,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,3,54,744,8,54,1,55,
        1,55,1,55,1,55,5,55,750,8,55,10,55,12,55,753,9,55,3,55,755,8,55,
        1,55,3,55,758,8,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,
        5,57,769,8,57,10,57,12,57,772,9,57,1,57,1,57,1,58,5,58,777,8,58,
        10,58,12,58,780,9,58,1,58,1,58,3,58,784,8,58,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,792,8,59,1,59,1,59,3,59,796,8,59,1,59,1,59,3,59,800,
        8,59,1,59,1,59,3,59,804,8,59,3,59,806,8,59,1,60,1,60,3,60,810,8,
        60,1,61,1,61,1,61,1,61,3,61,816,8,61,1,62,1,62,1,63,1,63,1,63,1,
        64,1,64,5,64,825,8,64,10,64,12,64,828,9,64,1,64,1,64,1,65,1,65,1,
        65,1,65,1,65,3,65,837,8,65,1,66,5,66,840,8,66,10,66,12,66,843,9,
        66,1,66,1,66,1,66,1,67,5,67,849,8,67,10,67,12,67,852,9,67,1,67,1,
        67,3,67,856,8,67,1,67,3,67,859,8,67,1,68,1,68,1,68,1,68,1,68,3,68,
        866,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,875,8,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,4,68,896,8,68,11,68,12,68,897,1,68,3,68,901,
        8,68,1,68,3,68,904,8,68,1,68,1,68,1,68,1,68,5,68,910,8,68,10,68,
        12,68,913,9,68,1,68,3,68,916,8,68,1,68,1,68,1,68,1,68,5,68,922,8,
        68,10,68,12,68,925,9,68,1,68,5,68,928,8,68,10,68,12,68,931,9,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,941,8,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,3,68,950,8,68,1,68,1,68,1,68,3,68,955,8,
        68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,965,8,68,1,69,1,
        69,1,69,5,69,970,8,69,10,69,12,69,973,9,69,1,69,1,69,1,69,1,69,1,
        69,1,70,1,70,1,70,5,70,983,8,70,10,70,12,70,986,9,70,1,71,1,71,1,
        71,1,72,1,72,1,72,3,72,994,8,72,1,72,1,72,1,73,1,73,1,73,5,73,1001,
        8,73,10,73,12,73,1004,9,73,1,74,5,74,1007,8,74,10,74,12,74,1010,
        9,74,1,74,1,74,1,74,1,74,1,74,1,75,4,75,1018,8,75,11,75,12,75,1019,
        1,75,4,75,1023,8,75,11,75,12,75,1024,1,76,1,76,1,76,3,76,1030,8,
        76,1,76,1,76,1,76,3,76,1035,8,76,1,77,1,77,3,77,1039,8,77,1,77,1,
        77,3,77,1043,8,77,1,77,1,77,3,77,1047,8,77,3,77,1049,8,77,1,78,1,
        78,3,78,1053,8,78,1,79,5,79,1056,8,79,10,79,12,79,1059,9,79,1,79,
        1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,5,81,1073,
        8,81,10,81,12,81,1076,9,81,1,82,1,82,1,82,3,82,1081,8,82,1,82,1,
        82,1,82,1,82,3,82,1087,8,82,1,82,1,82,1,82,1,82,3,82,1093,8,82,1,
        82,3,82,1096,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,1105,8,
        83,10,83,12,83,1108,9,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,3,83,1122,8,83,1,83,1,83,3,83,1126,8,83,1,83,
        1,83,1,83,3,83,1131,8,83,1,83,1,83,3,83,1135,8,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1151,
        8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        3,83,1191,8,83,1,83,1,83,1,83,1,83,3,83,1197,8,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1212,8,83,
        1,83,5,83,1215,8,83,10,83,12,83,1218,9,83,1,84,1,84,1,84,1,84,1,
        85,1,85,1,85,3,85,1227,8,85,1,85,1,85,1,85,1,85,1,85,5,85,1234,8,
        85,10,85,12,85,1237,9,85,1,85,3,85,1240,8,85,1,86,1,86,3,86,1244,
        8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,3,87,1262,8,87,3,87,1264,8,87,1,88,1,88,1,88,
        3,88,1269,8,88,1,88,5,88,1272,8,88,10,88,12,88,1275,9,88,1,88,1,
        88,3,88,1279,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1288,8,
        89,3,89,1290,8,89,1,90,1,90,3,90,1294,8,90,1,90,1,90,1,90,3,90,1299,
        8,90,5,90,1301,8,90,10,90,12,90,1304,9,90,1,90,3,90,1307,8,90,1,
        91,1,91,3,91,1311,8,91,1,91,1,91,1,92,1,92,1,92,1,92,5,92,1319,8,
        92,10,92,12,92,1322,9,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,
        1331,8,92,10,92,12,92,1334,9,92,1,92,1,92,5,92,1338,8,92,10,92,12,
        92,1341,9,92,3,92,1343,8,92,1,93,1,93,3,93,1347,8,93,1,94,1,94,1,
        94,1,95,1,95,1,95,3,95,1355,8,95,1,96,1,96,1,96,3,96,1360,8,96,1,
        97,1,97,1,97,1,97,1,98,1,98,1,98,5,98,1369,8,98,10,98,12,98,1372,
        9,98,1,99,5,99,1375,8,99,10,99,12,99,1378,9,99,1,99,1,99,3,99,1382,
        8,99,1,99,5,99,1385,8,99,10,99,12,99,1388,9,99,1,99,1,99,5,99,1392,
        8,99,10,99,12,99,1395,9,99,1,100,1,100,1,101,1,101,1,101,1,101,5,
        101,1403,8,101,10,101,12,101,1406,9,101,1,101,1,101,1,102,1,102,
        1,102,1,102,3,102,1414,8,102,3,102,1416,8,102,1,103,1,103,1,103,
        1,103,3,103,1422,8,103,1,104,1,104,3,104,1426,8,104,1,104,1,104,
        1,104,0,1,166,105,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,0,12,
        2,0,17,17,40,40,1,0,51,54,1,0,55,56,1,0,83,86,1,0,73,74,2,0,87,88,
        92,92,1,0,85,86,2,0,71,72,78,79,2,0,77,77,80,80,2,0,70,70,93,103,
        1,0,83,84,8,0,3,3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,1589,0,211,
        1,0,0,0,2,230,1,0,0,0,4,237,1,0,0,0,6,261,1,0,0,0,8,268,1,0,0,0,
        10,278,1,0,0,0,12,282,1,0,0,0,14,284,1,0,0,0,16,299,1,0,0,0,18,313,
        1,0,0,0,20,327,1,0,0,0,22,335,1,0,0,0,24,353,1,0,0,0,26,364,1,0,
        0,0,28,374,1,0,0,0,30,381,1,0,0,0,32,392,1,0,0,0,34,401,1,0,0,0,
        36,422,1,0,0,0,38,433,1,0,0,0,40,435,1,0,0,0,42,453,1,0,0,0,44,457,
        1,0,0,0,46,459,1,0,0,0,48,462,1,0,0,0,50,465,1,0,0,0,52,473,1,0,
        0,0,54,485,1,0,0,0,56,494,1,0,0,0,58,496,1,0,0,0,60,507,1,0,0,0,
        62,521,1,0,0,0,64,557,1,0,0,0,66,559,1,0,0,0,68,562,1,0,0,0,70,570,
        1,0,0,0,72,575,1,0,0,0,74,585,1,0,0,0,76,587,1,0,0,0,78,603,1,0,
        0,0,80,629,1,0,0,0,82,631,1,0,0,0,84,639,1,0,0,0,86,658,1,0,0,0,
        88,663,1,0,0,0,90,672,1,0,0,0,92,685,1,0,0,0,94,699,1,0,0,0,96,701,
        1,0,0,0,98,703,1,0,0,0,100,709,1,0,0,0,102,718,1,0,0,0,104,728,1,
        0,0,0,106,736,1,0,0,0,108,743,1,0,0,0,110,745,1,0,0,0,112,761,1,
        0,0,0,114,766,1,0,0,0,116,783,1,0,0,0,118,805,1,0,0,0,120,809,1,
        0,0,0,122,811,1,0,0,0,124,817,1,0,0,0,126,819,1,0,0,0,128,822,1,
        0,0,0,130,836,1,0,0,0,132,841,1,0,0,0,134,858,1,0,0,0,136,964,1,
        0,0,0,138,966,1,0,0,0,140,979,1,0,0,0,142,987,1,0,0,0,144,990,1,
        0,0,0,146,997,1,0,0,0,148,1008,1,0,0,0,150,1017,1,0,0,0,152,1034,
        1,0,0,0,154,1048,1,0,0,0,156,1052,1,0,0,0,158,1057,1,0,0,0,160,1065,
        1,0,0,0,162,1069,1,0,0,0,164,1095,1,0,0,0,166,1134,1,0,0,0,168,1219,
        1,0,0,0,170,1239,1,0,0,0,172,1243,1,0,0,0,174,1263,1,0,0,0,176,1268,
        1,0,0,0,178,1289,1,0,0,0,180,1306,1,0,0,0,182,1308,1,0,0,0,184,1314,
        1,0,0,0,186,1344,1,0,0,0,188,1348,1,0,0,0,190,1354,1,0,0,0,192,1359,
        1,0,0,0,194,1361,1,0,0,0,196,1365,1,0,0,0,198,1376,1,0,0,0,200,1396,
        1,0,0,0,202,1398,1,0,0,0,204,1415,1,0,0,0,206,1421,1,0,0,0,208,1423,
        1,0,0,0,210,212,3,2,1,0,211,210,1,0,0,0,211,212,1,0,0,0,212,216,
        1,0,0,0,213,215,3,4,2,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,222,1,0,0,0,218,216,1,0,0,0,219,221,
        3,6,3,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,
        1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,0,0,1,226,1,1,
        0,0,0,227,229,3,102,51,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,
        1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,
        5,32,0,0,234,235,3,92,46,0,235,236,5,67,0,0,236,3,1,0,0,0,237,239,
        5,25,0,0,238,240,5,38,0,0,239,238,1,0,0,0,239,240,1,0,0,0,240,241,
        1,0,0,0,241,244,3,92,46,0,242,243,5,69,0,0,243,245,5,87,0,0,244,
        242,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,5,67,0,0,247,
        5,1,0,0,0,248,250,3,10,5,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,
        1,0,0,0,251,252,1,0,0,0,252,258,1,0,0,0,253,251,1,0,0,0,254,259,
        3,14,7,0,255,259,3,22,11,0,256,259,3,30,15,0,257,259,3,112,56,0,
        258,254,1,0,0,0,258,255,1,0,0,0,258,256,1,0,0,0,258,257,1,0,0,0,
        259,262,1,0,0,0,260,262,5,67,0,0,261,251,1,0,0,0,261,260,1,0,0,0,
        262,7,1,0,0,0,263,269,3,10,5,0,264,269,5,30,0,0,265,269,5,42,0,0,
        266,269,5,46,0,0,267,269,5,49,0,0,268,263,1,0,0,0,268,264,1,0,0,
        0,268,265,1,0,0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,9,1,0,0,0,
        270,279,3,102,51,0,271,279,5,35,0,0,272,279,5,34,0,0,273,279,5,33,
        0,0,274,279,5,38,0,0,275,279,5,1,0,0,276,279,5,18,0,0,277,279,5,
        39,0,0,278,270,1,0,0,0,278,271,1,0,0,0,278,272,1,0,0,0,278,273,1,
        0,0,0,278,274,1,0,0,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,
        0,0,0,279,11,1,0,0,0,280,283,5,18,0,0,281,283,3,102,51,0,282,280,
        1,0,0,0,282,281,1,0,0,0,283,13,1,0,0,0,284,285,5,9,0,0,285,287,5,
        111,0,0,286,288,3,16,8,0,287,286,1,0,0,0,287,288,1,0,0,0,288,291,
        1,0,0,0,289,290,5,17,0,0,290,292,3,198,99,0,291,289,1,0,0,0,291,
        292,1,0,0,0,292,295,1,0,0,0,293,294,5,24,0,0,294,296,3,196,98,0,
        295,293,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,3,32,16,
        0,298,15,1,0,0,0,299,300,5,72,0,0,300,305,3,18,9,0,301,302,5,68,
        0,0,302,304,3,18,9,0,303,301,1,0,0,0,304,307,1,0,0,0,305,303,1,0,
        0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,309,5,71,
        0,0,309,17,1,0,0,0,310,312,3,102,51,0,311,310,1,0,0,0,312,315,1,
        0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,313,1,
        0,0,0,316,325,5,111,0,0,317,321,5,17,0,0,318,320,3,102,51,0,319,
        318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        324,1,0,0,0,323,321,1,0,0,0,324,326,3,20,10,0,325,317,1,0,0,0,325,
        326,1,0,0,0,326,19,1,0,0,0,327,332,3,198,99,0,328,329,5,89,0,0,329,
        331,3,198,99,0,330,328,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,
        333,1,0,0,0,333,21,1,0,0,0,334,332,1,0,0,0,335,336,5,16,0,0,336,
        339,5,111,0,0,337,338,5,24,0,0,338,340,3,196,98,0,339,337,1,0,0,
        0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,5,63,0,0,342,344,3,24,
        12,0,343,342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,5,68,
        0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,350,3,28,
        14,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,64,
        0,0,352,23,1,0,0,0,353,358,3,26,13,0,354,355,5,68,0,0,355,357,3,
        26,13,0,356,354,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,
        1,0,0,0,359,25,1,0,0,0,360,358,1,0,0,0,361,363,3,102,51,0,362,361,
        1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,
        1,0,0,0,366,364,1,0,0,0,367,369,5,111,0,0,368,370,3,208,104,0,369,
        368,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,373,3,32,16,0,372,
        371,1,0,0,0,372,373,1,0,0,0,373,27,1,0,0,0,374,378,5,67,0,0,375,
        377,3,36,18,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,
        379,1,0,0,0,379,29,1,0,0,0,380,378,1,0,0,0,381,382,5,28,0,0,382,
        384,5,111,0,0,383,385,3,16,8,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
        388,1,0,0,0,386,387,5,17,0,0,387,389,3,196,98,0,388,386,1,0,0,0,
        388,389,1,0,0,0,389,390,1,0,0,0,390,391,3,34,17,0,391,31,1,0,0,0,
        392,396,5,63,0,0,393,395,3,36,18,0,394,393,1,0,0,0,395,398,1,0,0,
        0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,
        0,399,400,5,64,0,0,400,33,1,0,0,0,401,405,5,63,0,0,402,404,3,54,
        27,0,403,402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,
        0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,64,0,0,409,35,1,0,
        0,0,410,423,5,67,0,0,411,413,5,38,0,0,412,411,1,0,0,0,412,413,1,
        0,0,0,413,414,1,0,0,0,414,423,3,128,64,0,415,417,3,8,4,0,416,415,
        1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,
        1,0,0,0,420,418,1,0,0,0,421,423,3,38,19,0,422,410,1,0,0,0,422,412,
        1,0,0,0,422,418,1,0,0,0,423,37,1,0,0,0,424,434,3,40,20,0,425,434,
        3,46,23,0,426,434,3,52,26,0,427,434,3,50,25,0,428,434,3,48,24,0,
        429,434,3,30,15,0,430,434,3,112,56,0,431,434,3,14,7,0,432,434,3,
        22,11,0,433,424,1,0,0,0,433,425,1,0,0,0,433,426,1,0,0,0,433,427,
        1,0,0,0,433,428,1,0,0,0,433,429,1,0,0,0,433,430,1,0,0,0,433,431,
        1,0,0,0,433,432,1,0,0,0,434,39,1,0,0,0,435,436,3,44,22,0,436,437,
        5,111,0,0,437,442,3,84,42,0,438,439,5,65,0,0,439,441,5,66,0,0,440,
        438,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,
        447,1,0,0,0,444,442,1,0,0,0,445,446,5,45,0,0,446,448,3,82,41,0,447,
        445,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,3,42,21,0,450,
        41,1,0,0,0,451,454,3,128,64,0,452,454,5,67,0,0,453,451,1,0,0,0,453,
        452,1,0,0,0,454,43,1,0,0,0,455,458,3,198,99,0,456,458,5,48,0,0,457,
        455,1,0,0,0,457,456,1,0,0,0,458,45,1,0,0,0,459,460,3,16,8,0,460,
        461,3,40,20,0,461,47,1,0,0,0,462,463,3,16,8,0,463,464,3,50,25,0,
        464,49,1,0,0,0,465,466,5,111,0,0,466,469,3,84,42,0,467,468,5,45,
        0,0,468,470,3,82,41,0,469,467,1,0,0,0,469,470,1,0,0,0,470,471,1,
        0,0,0,471,472,3,128,64,0,472,51,1,0,0,0,473,474,3,198,99,0,474,475,
        3,68,34,0,475,476,5,67,0,0,476,53,1,0,0,0,477,479,3,8,4,0,478,477,
        1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,
        1,0,0,0,482,480,1,0,0,0,483,486,3,56,28,0,484,486,5,67,0,0,485,480,
        1,0,0,0,485,484,1,0,0,0,486,55,1,0,0,0,487,495,3,58,29,0,488,495,
        3,62,31,0,489,495,3,66,33,0,490,495,3,30,15,0,491,495,3,112,56,0,
        492,495,3,14,7,0,493,495,3,22,11,0,494,487,1,0,0,0,494,488,1,0,0,
        0,494,489,1,0,0,0,494,490,1,0,0,0,494,491,1,0,0,0,494,492,1,0,0,
        0,494,493,1,0,0,0,495,57,1,0,0,0,496,497,3,198,99,0,497,502,3,60,
        30,0,498,499,5,68,0,0,499,501,3,60,30,0,500,498,1,0,0,0,501,504,
        1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,502,
        1,0,0,0,505,506,5,67,0,0,506,59,1,0,0,0,507,512,5,111,0,0,508,509,
        5,65,0,0,509,511,5,66,0,0,510,508,1,0,0,0,511,514,1,0,0,0,512,510,
        1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,516,
        5,70,0,0,516,517,3,74,37,0,517,61,1,0,0,0,518,520,3,64,32,0,519,
        518,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,
        534,1,0,0,0,523,521,1,0,0,0,524,535,3,44,22,0,525,529,3,16,8,0,526,
        528,3,102,51,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,
        530,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,533,3,44,22,0,533,
        535,1,0,0,0,534,524,1,0,0,0,534,525,1,0,0,0,535,536,1,0,0,0,536,
        537,5,111,0,0,537,542,3,84,42,0,538,539,5,65,0,0,539,541,5,66,0,
        0,540,538,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,
        0,543,547,1,0,0,0,544,542,1,0,0,0,545,546,5,45,0,0,546,548,3,82,
        41,0,547,545,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,3,42,
        21,0,550,63,1,0,0,0,551,558,3,102,51,0,552,558,5,35,0,0,553,558,
        5,1,0,0,554,558,5,12,0,0,555,558,5,38,0,0,556,558,5,39,0,0,557,551,
        1,0,0,0,557,552,1,0,0,0,557,553,1,0,0,0,557,554,1,0,0,0,557,555,
        1,0,0,0,557,556,1,0,0,0,558,65,1,0,0,0,559,560,3,16,8,0,560,561,
        3,62,31,0,561,67,1,0,0,0,562,567,3,70,35,0,563,564,5,68,0,0,564,
        566,3,70,35,0,565,563,1,0,0,0,566,569,1,0,0,0,567,565,1,0,0,0,567,
        568,1,0,0,0,568,69,1,0,0,0,569,567,1,0,0,0,570,573,3,72,36,0,571,
        572,5,70,0,0,572,574,3,74,37,0,573,571,1,0,0,0,573,574,1,0,0,0,574,
        71,1,0,0,0,575,580,5,111,0,0,576,577,5,65,0,0,577,579,5,66,0,0,578,
        576,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,
        73,1,0,0,0,582,580,1,0,0,0,583,586,3,76,38,0,584,586,3,166,83,0,
        585,583,1,0,0,0,585,584,1,0,0,0,586,75,1,0,0,0,587,599,5,63,0,0,
        588,593,3,74,37,0,589,590,5,68,0,0,590,592,3,74,37,0,591,589,1,0,
        0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,597,1,0,
        0,0,595,593,1,0,0,0,596,598,5,68,0,0,597,596,1,0,0,0,597,598,1,0,
        0,0,598,600,1,0,0,0,599,588,1,0,0,0,599,600,1,0,0,0,600,601,1,0,
        0,0,601,602,5,64,0,0,602,77,1,0,0,0,603,605,5,111,0,0,604,606,3,
        202,101,0,605,604,1,0,0,0,605,606,1,0,0,0,606,614,1,0,0,0,607,608,
        5,69,0,0,608,610,5,111,0,0,609,611,3,202,101,0,610,609,1,0,0,0,610,
        611,1,0,0,0,611,613,1,0,0,0,612,607,1,0,0,0,613,616,1,0,0,0,614,
        612,1,0,0,0,614,615,1,0,0,0,615,79,1,0,0,0,616,614,1,0,0,0,617,630,
        3,198,99,0,618,620,3,102,51,0,619,618,1,0,0,0,620,623,1,0,0,0,621,
        619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,624,
        627,5,75,0,0,625,626,7,0,0,0,626,628,3,198,99,0,627,625,1,0,0,0,
        627,628,1,0,0,0,628,630,1,0,0,0,629,617,1,0,0,0,629,621,1,0,0,0,
        630,81,1,0,0,0,631,636,3,92,46,0,632,633,5,68,0,0,633,635,3,92,46,
        0,634,632,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,
        0,637,83,1,0,0,0,638,636,1,0,0,0,639,641,5,61,0,0,640,642,3,86,43,
        0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,5,62,0,
        0,644,85,1,0,0,0,645,650,3,88,44,0,646,647,5,68,0,0,647,649,3,88,
        44,0,648,646,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,
        0,0,651,655,1,0,0,0,652,650,1,0,0,0,653,654,5,68,0,0,654,656,3,90,
        45,0,655,653,1,0,0,0,655,656,1,0,0,0,656,659,1,0,0,0,657,659,3,90,
        45,0,658,645,1,0,0,0,658,657,1,0,0,0,659,87,1,0,0,0,660,662,3,12,
        6,0,661,660,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,
        0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,667,3,198,99,0,667,668,3,
        72,36,0,668,89,1,0,0,0,669,671,3,12,6,0,670,669,1,0,0,0,671,674,
        1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,672,
        1,0,0,0,675,679,3,198,99,0,676,678,3,102,51,0,677,676,1,0,0,0,678,
        681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,682,1,0,0,0,681,
        679,1,0,0,0,682,683,5,107,0,0,683,684,3,72,36,0,684,91,1,0,0,0,685,
        690,5,111,0,0,686,687,5,69,0,0,687,689,5,111,0,0,688,686,1,0,0,0,
        689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,93,1,0,0,0,692,
        690,1,0,0,0,693,700,3,96,48,0,694,700,3,98,49,0,695,700,5,58,0,0,
        696,700,5,59,0,0,697,700,5,57,0,0,698,700,5,60,0,0,699,693,1,0,0,
        0,699,694,1,0,0,0,699,695,1,0,0,0,699,696,1,0,0,0,699,697,1,0,0,
        0,699,698,1,0,0,0,700,95,1,0,0,0,701,702,7,1,0,0,702,97,1,0,0,0,
        703,704,7,2,0,0,704,99,1,0,0,0,705,706,5,111,0,0,706,708,5,69,0,
        0,707,705,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,
        0,710,712,1,0,0,0,711,709,1,0,0,0,712,713,5,106,0,0,713,714,5,111,
        0,0,714,101,1,0,0,0,715,716,5,106,0,0,716,719,3,92,46,0,717,719,
        3,100,50,0,718,715,1,0,0,0,718,717,1,0,0,0,719,726,1,0,0,0,720,723,
        5,61,0,0,721,724,3,104,52,0,722,724,3,108,54,0,723,721,1,0,0,0,723,
        722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,727,5,62,0,0,726,
        720,1,0,0,0,726,727,1,0,0,0,727,103,1,0,0,0,728,733,3,106,53,0,729,
        730,5,68,0,0,730,732,3,106,53,0,731,729,1,0,0,0,732,735,1,0,0,0,
        733,731,1,0,0,0,733,734,1,0,0,0,734,105,1,0,0,0,735,733,1,0,0,0,
        736,737,5,111,0,0,737,738,5,70,0,0,738,739,3,108,54,0,739,107,1,
        0,0,0,740,744,3,166,83,0,741,744,3,102,51,0,742,744,3,110,55,0,743,
        740,1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,109,1,0,0,0,745,
        754,5,63,0,0,746,751,3,108,54,0,747,748,5,68,0,0,748,750,3,108,54,
        0,749,747,1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,
        0,752,755,1,0,0,0,753,751,1,0,0,0,754,746,1,0,0,0,754,755,1,0,0,
        0,755,757,1,0,0,0,756,758,5,68,0,0,757,756,1,0,0,0,757,758,1,0,0,
        0,758,759,1,0,0,0,759,760,5,64,0,0,760,111,1,0,0,0,761,762,5,106,
        0,0,762,763,5,28,0,0,763,764,5,111,0,0,764,765,3,114,57,0,765,113,
        1,0,0,0,766,770,5,63,0,0,767,769,3,116,58,0,768,767,1,0,0,0,769,
        772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,
        770,1,0,0,0,773,774,5,64,0,0,774,115,1,0,0,0,775,777,3,8,4,0,776,
        775,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,
        781,1,0,0,0,780,778,1,0,0,0,781,784,3,118,59,0,782,784,5,67,0,0,
        783,778,1,0,0,0,783,782,1,0,0,0,784,117,1,0,0,0,785,786,3,198,99,
        0,786,787,3,120,60,0,787,788,5,67,0,0,788,806,1,0,0,0,789,791,3,
        14,7,0,790,792,5,67,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,806,
        1,0,0,0,793,795,3,30,15,0,794,796,5,67,0,0,795,794,1,0,0,0,795,796,
        1,0,0,0,796,806,1,0,0,0,797,799,3,22,11,0,798,800,5,67,0,0,799,798,
        1,0,0,0,799,800,1,0,0,0,800,806,1,0,0,0,801,803,3,112,56,0,802,804,
        5,67,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,785,
        1,0,0,0,805,789,1,0,0,0,805,793,1,0,0,0,805,797,1,0,0,0,805,801,
        1,0,0,0,806,119,1,0,0,0,807,810,3,122,61,0,808,810,3,124,62,0,809,
        807,1,0,0,0,809,808,1,0,0,0,810,121,1,0,0,0,811,812,5,111,0,0,812,
        813,5,61,0,0,813,815,5,62,0,0,814,816,3,126,63,0,815,814,1,0,0,0,
        815,816,1,0,0,0,816,123,1,0,0,0,817,818,3,68,34,0,818,125,1,0,0,
        0,819,820,5,12,0,0,820,821,3,108,54,0,821,127,1,0,0,0,822,826,5,
        63,0,0,823,825,3,130,65,0,824,823,1,0,0,0,825,828,1,0,0,0,826,824,
        1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,826,1,0,0,0,829,830,
        5,64,0,0,830,129,1,0,0,0,831,832,3,132,66,0,832,833,5,67,0,0,833,
        837,1,0,0,0,834,837,3,136,68,0,835,837,3,134,67,0,836,831,1,0,0,
        0,836,834,1,0,0,0,836,835,1,0,0,0,837,131,1,0,0,0,838,840,3,12,6,
        0,839,838,1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,
        0,842,844,1,0,0,0,843,841,1,0,0,0,844,845,3,198,99,0,845,846,3,68,
        34,0,846,133,1,0,0,0,847,849,3,10,5,0,848,847,1,0,0,0,849,852,1,
        0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,855,1,0,0,0,852,850,1,
        0,0,0,853,856,3,14,7,0,854,856,3,30,15,0,855,853,1,0,0,0,855,854,
        1,0,0,0,856,859,1,0,0,0,857,859,5,67,0,0,858,850,1,0,0,0,858,857,
        1,0,0,0,859,135,1,0,0,0,860,965,3,128,64,0,861,862,5,2,0,0,862,865,
        3,166,83,0,863,864,5,76,0,0,864,866,3,166,83,0,865,863,1,0,0,0,865,
        866,1,0,0,0,866,867,1,0,0,0,867,868,5,67,0,0,868,965,1,0,0,0,869,
        870,5,22,0,0,870,871,3,160,80,0,871,874,3,136,68,0,872,873,5,15,
        0,0,873,875,3,136,68,0,874,872,1,0,0,0,874,875,1,0,0,0,875,965,1,
        0,0,0,876,877,5,21,0,0,877,878,5,61,0,0,878,879,3,154,77,0,879,880,
        5,62,0,0,880,881,3,136,68,0,881,965,1,0,0,0,882,883,5,50,0,0,883,
        884,3,160,80,0,884,885,3,136,68,0,885,965,1,0,0,0,886,887,5,13,0,
        0,887,888,3,136,68,0,888,889,5,50,0,0,889,890,3,160,80,0,890,891,
        5,67,0,0,891,965,1,0,0,0,892,893,5,47,0,0,893,903,3,128,64,0,894,
        896,3,138,69,0,895,894,1,0,0,0,896,897,1,0,0,0,897,895,1,0,0,0,897,
        898,1,0,0,0,898,900,1,0,0,0,899,901,3,142,71,0,900,899,1,0,0,0,900,
        901,1,0,0,0,901,904,1,0,0,0,902,904,3,142,71,0,903,895,1,0,0,0,903,
        902,1,0,0,0,904,965,1,0,0,0,905,906,5,47,0,0,906,907,3,144,72,0,
        907,911,3,128,64,0,908,910,3,138,69,0,909,908,1,0,0,0,910,913,1,
        0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,915,1,0,0,0,913,911,1,
        0,0,0,914,916,3,142,71,0,915,914,1,0,0,0,915,916,1,0,0,0,916,965,
        1,0,0,0,917,918,5,41,0,0,918,919,3,160,80,0,919,923,5,63,0,0,920,
        922,3,150,75,0,921,920,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,0,923,
        924,1,0,0,0,924,929,1,0,0,0,925,923,1,0,0,0,926,928,3,152,76,0,927,
        926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,
        932,1,0,0,0,931,929,1,0,0,0,932,933,5,64,0,0,933,965,1,0,0,0,934,
        935,5,42,0,0,935,936,3,160,80,0,936,937,3,128,64,0,937,965,1,0,0,
        0,938,940,5,36,0,0,939,941,3,166,83,0,940,939,1,0,0,0,940,941,1,
        0,0,0,941,942,1,0,0,0,942,965,5,67,0,0,943,944,5,44,0,0,944,945,
        3,166,83,0,945,946,5,67,0,0,946,965,1,0,0,0,947,949,5,4,0,0,948,
        950,5,111,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,
        965,5,67,0,0,952,954,5,11,0,0,953,955,5,111,0,0,954,953,1,0,0,0,
        954,955,1,0,0,0,955,956,1,0,0,0,956,965,5,67,0,0,957,965,5,67,0,
        0,958,959,3,166,83,0,959,960,5,67,0,0,960,965,1,0,0,0,961,962,5,
        111,0,0,962,963,5,76,0,0,963,965,3,136,68,0,964,860,1,0,0,0,964,
        861,1,0,0,0,964,869,1,0,0,0,964,876,1,0,0,0,964,882,1,0,0,0,964,
        886,1,0,0,0,964,892,1,0,0,0,964,905,1,0,0,0,964,917,1,0,0,0,964,
        934,1,0,0,0,964,938,1,0,0,0,964,943,1,0,0,0,964,947,1,0,0,0,964,
        952,1,0,0,0,964,957,1,0,0,0,964,958,1,0,0,0,964,961,1,0,0,0,965,
        137,1,0,0,0,966,967,5,7,0,0,967,971,5,61,0,0,968,970,3,12,6,0,969,
        968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,
        974,1,0,0,0,973,971,1,0,0,0,974,975,3,140,70,0,975,976,5,111,0,0,
        976,977,5,62,0,0,977,978,3,128,64,0,978,139,1,0,0,0,979,984,3,92,
        46,0,980,981,5,90,0,0,981,983,3,92,46,0,982,980,1,0,0,0,983,986,
        1,0,0,0,984,982,1,0,0,0,984,985,1,0,0,0,985,141,1,0,0,0,986,984,
        1,0,0,0,987,988,5,19,0,0,988,989,3,128,64,0,989,143,1,0,0,0,990,
        991,5,61,0,0,991,993,3,146,73,0,992,994,5,67,0,0,993,992,1,0,0,0,
        993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,62,0,0,996,145,1,0,0,0,
        997,1002,3,148,74,0,998,999,5,67,0,0,999,1001,3,148,74,0,1000,998,
        1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,
        147,1,0,0,0,1004,1002,1,0,0,0,1005,1007,3,12,6,0,1006,1005,1,0,0,
        0,1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,
        1,0,0,0,1010,1008,1,0,0,0,1011,1012,3,78,39,0,1012,1013,3,72,36,
        0,1013,1014,5,70,0,0,1014,1015,3,166,83,0,1015,149,1,0,0,0,1016,
        1018,3,152,76,0,1017,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1017,1,
        0,0,0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,1023,3,130,65,0,1022,
        1021,1,0,0,0,1023,1024,1,0,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,
        0,1025,151,1,0,0,0,1026,1029,5,6,0,0,1027,1030,3,166,83,0,1028,1030,
        5,111,0,0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,1031,1,0,0,0,
        1031,1035,5,76,0,0,1032,1033,5,12,0,0,1033,1035,5,76,0,0,1034,1026,
        1,0,0,0,1034,1032,1,0,0,0,1035,153,1,0,0,0,1036,1049,3,158,79,0,
        1037,1039,3,156,78,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,
        1,0,0,0,1040,1042,5,67,0,0,1041,1043,3,166,83,0,1042,1041,1,0,0,
        0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1046,5,67,0,0,1045,1047,
        3,162,81,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1049,1,0,0,0,
        1048,1036,1,0,0,0,1048,1038,1,0,0,0,1049,155,1,0,0,0,1050,1053,3,
        132,66,0,1051,1053,3,162,81,0,1052,1050,1,0,0,0,1052,1051,1,0,0,
        0,1053,157,1,0,0,0,1054,1056,3,12,6,0,1055,1054,1,0,0,0,1056,1059,
        1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,1060,1,0,0,0,1059,
        1057,1,0,0,0,1060,1061,3,198,99,0,1061,1062,3,72,36,0,1062,1063,
        5,76,0,0,1063,1064,3,166,83,0,1064,159,1,0,0,0,1065,1066,5,61,0,
        0,1066,1067,3,166,83,0,1067,1068,5,62,0,0,1068,161,1,0,0,0,1069,
        1074,3,166,83,0,1070,1071,5,68,0,0,1071,1073,3,166,83,0,1072,1070,
        1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,
        163,1,0,0,0,1076,1074,1,0,0,0,1077,1078,5,111,0,0,1078,1080,5,61,
        0,0,1079,1081,3,162,81,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,
        1082,1,0,0,0,1082,1096,5,62,0,0,1083,1084,5,43,0,0,1084,1086,5,61,
        0,0,1085,1087,3,162,81,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,
        1088,1,0,0,0,1088,1096,5,62,0,0,1089,1090,5,40,0,0,1090,1092,5,61,
        0,0,1091,1093,3,162,81,0,1092,1091,1,0,0,0,1092,1093,1,0,0,0,1093,
        1094,1,0,0,0,1094,1096,5,62,0,0,1095,1077,1,0,0,0,1095,1083,1,0,
        0,0,1095,1089,1,0,0,0,1096,165,1,0,0,0,1097,1098,6,83,-1,0,1098,
        1135,3,174,87,0,1099,1135,3,164,82,0,1100,1101,5,31,0,0,1101,1135,
        3,178,89,0,1102,1106,5,61,0,0,1103,1105,3,102,51,0,1104,1103,1,0,
        0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1109,
        1,0,0,0,1108,1106,1,0,0,0,1109,1110,3,198,99,0,1110,1111,5,62,0,
        0,1111,1112,3,166,83,21,1112,1135,1,0,0,0,1113,1114,7,3,0,0,1114,
        1135,3,166,83,19,1115,1116,7,4,0,0,1116,1135,3,166,83,18,1117,1135,
        3,168,84,0,1118,1119,3,198,99,0,1119,1125,5,105,0,0,1120,1122,3,
        202,101,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,
        1123,1126,5,111,0,0,1124,1126,5,31,0,0,1125,1121,1,0,0,0,1125,1124,
        1,0,0,0,1126,1135,1,0,0,0,1127,1128,3,176,88,0,1128,1130,5,105,0,
        0,1129,1131,3,202,101,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,
        1132,1,0,0,0,1132,1133,5,31,0,0,1133,1135,1,0,0,0,1134,1097,1,0,
        0,0,1134,1099,1,0,0,0,1134,1100,1,0,0,0,1134,1102,1,0,0,0,1134,1113,
        1,0,0,0,1134,1115,1,0,0,0,1134,1117,1,0,0,0,1134,1118,1,0,0,0,1134,
        1127,1,0,0,0,1135,1216,1,0,0,0,1136,1137,10,17,0,0,1137,1138,7,5,
        0,0,1138,1215,3,166,83,18,1139,1140,10,16,0,0,1140,1141,7,6,0,0,
        1141,1215,3,166,83,17,1142,1150,10,15,0,0,1143,1144,5,72,0,0,1144,
        1151,5,72,0,0,1145,1146,5,71,0,0,1146,1147,5,71,0,0,1147,1151,5,
        71,0,0,1148,1149,5,71,0,0,1149,1151,5,71,0,0,1150,1143,1,0,0,0,1150,
        1145,1,0,0,0,1150,1148,1,0,0,0,1151,1152,1,0,0,0,1152,1215,3,166,
        83,16,1153,1154,10,14,0,0,1154,1155,7,7,0,0,1155,1215,3,166,83,15,
        1156,1157,10,12,0,0,1157,1158,7,8,0,0,1158,1215,3,166,83,13,1159,
        1160,10,11,0,0,1160,1161,5,89,0,0,1161,1215,3,166,83,12,1162,1163,
        10,10,0,0,1163,1164,5,91,0,0,1164,1215,3,166,83,11,1165,1166,10,
        9,0,0,1166,1167,5,90,0,0,1167,1215,3,166,83,10,1168,1169,10,8,0,
        0,1169,1170,5,81,0,0,1170,1215,3,166,83,9,1171,1172,10,7,0,0,1172,
        1173,5,82,0,0,1173,1215,3,166,83,8,1174,1175,10,6,0,0,1175,1176,
        5,75,0,0,1176,1177,3,166,83,0,1177,1178,5,76,0,0,1178,1179,3,166,
        83,6,1179,1215,1,0,0,0,1180,1181,10,5,0,0,1181,1182,7,9,0,0,1182,
        1215,3,166,83,5,1183,1184,10,25,0,0,1184,1196,5,69,0,0,1185,1197,
        5,111,0,0,1186,1197,3,164,82,0,1187,1197,5,43,0,0,1188,1190,5,31,
        0,0,1189,1191,3,194,97,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,
        1192,1,0,0,0,1192,1197,3,182,91,0,1193,1194,5,40,0,0,1194,1197,3,
        204,102,0,1195,1197,3,188,94,0,1196,1185,1,0,0,0,1196,1186,1,0,0,
        0,1196,1187,1,0,0,0,1196,1188,1,0,0,0,1196,1193,1,0,0,0,1196,1195,
        1,0,0,0,1197,1215,1,0,0,0,1198,1199,10,24,0,0,1199,1200,5,65,0,0,
        1200,1201,3,166,83,0,1201,1202,5,66,0,0,1202,1215,1,0,0,0,1203,1204,
        10,20,0,0,1204,1215,7,10,0,0,1205,1206,10,13,0,0,1206,1207,5,26,
        0,0,1207,1215,3,198,99,0,1208,1209,10,3,0,0,1209,1211,5,105,0,0,
        1210,1212,3,202,101,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,
        1,0,0,0,1213,1215,5,111,0,0,1214,1136,1,0,0,0,1214,1139,1,0,0,0,
        1214,1142,1,0,0,0,1214,1153,1,0,0,0,1214,1156,1,0,0,0,1214,1159,
        1,0,0,0,1214,1162,1,0,0,0,1214,1165,1,0,0,0,1214,1168,1,0,0,0,1214,
        1171,1,0,0,0,1214,1174,1,0,0,0,1214,1180,1,0,0,0,1214,1183,1,0,0,
        0,1214,1198,1,0,0,0,1214,1203,1,0,0,0,1214,1205,1,0,0,0,1214,1208,
        1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,
        167,1,0,0,0,1218,1216,1,0,0,0,1219,1220,3,170,85,0,1220,1221,5,104,
        0,0,1221,1222,3,172,86,0,1222,169,1,0,0,0,1223,1240,5,111,0,0,1224,
        1226,5,61,0,0,1225,1227,3,86,43,0,1226,1225,1,0,0,0,1226,1227,1,
        0,0,0,1227,1228,1,0,0,0,1228,1240,5,62,0,0,1229,1230,5,61,0,0,1230,
        1235,5,111,0,0,1231,1232,5,68,0,0,1232,1234,5,111,0,0,1233,1231,
        1,0,0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,
        1238,1,0,0,0,1237,1235,1,0,0,0,1238,1240,5,62,0,0,1239,1223,1,0,
        0,0,1239,1224,1,0,0,0,1239,1229,1,0,0,0,1240,171,1,0,0,0,1241,1244,
        3,166,83,0,1242,1244,3,128,64,0,1243,1241,1,0,0,0,1243,1242,1,0,
        0,0,1244,173,1,0,0,0,1245,1246,5,61,0,0,1246,1247,3,166,83,0,1247,
        1248,5,62,0,0,1248,1264,1,0,0,0,1249,1264,5,43,0,0,1250,1264,5,40,
        0,0,1251,1264,3,94,47,0,1252,1264,5,111,0,0,1253,1254,3,44,22,0,
        1254,1255,5,69,0,0,1255,1256,5,9,0,0,1256,1264,1,0,0,0,1257,1261,
        3,194,97,0,1258,1262,3,206,103,0,1259,1260,5,43,0,0,1260,1262,3,
        208,104,0,1261,1258,1,0,0,0,1261,1259,1,0,0,0,1262,1264,1,0,0,0,
        1263,1245,1,0,0,0,1263,1249,1,0,0,0,1263,1250,1,0,0,0,1263,1251,
        1,0,0,0,1263,1252,1,0,0,0,1263,1253,1,0,0,0,1263,1257,1,0,0,0,1264,
        175,1,0,0,0,1265,1266,3,78,39,0,1266,1267,5,69,0,0,1267,1269,1,0,
        0,0,1268,1265,1,0,0,0,1268,1269,1,0,0,0,1269,1273,1,0,0,0,1270,1272,
        3,102,51,0,1271,1270,1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,
        1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1273,1,0,0,0,1276,1278,
        5,111,0,0,1277,1279,3,202,101,0,1278,1277,1,0,0,0,1278,1279,1,0,
        0,0,1279,177,1,0,0,0,1280,1281,3,194,97,0,1281,1282,3,180,90,0,1282,
        1283,3,186,93,0,1283,1290,1,0,0,0,1284,1287,3,180,90,0,1285,1288,
        3,184,92,0,1286,1288,3,186,93,0,1287,1285,1,0,0,0,1287,1286,1,0,
        0,0,1288,1290,1,0,0,0,1289,1280,1,0,0,0,1289,1284,1,0,0,0,1290,179,
        1,0,0,0,1291,1293,5,111,0,0,1292,1294,3,190,95,0,1293,1292,1,0,0,
        0,1293,1294,1,0,0,0,1294,1302,1,0,0,0,1295,1296,5,69,0,0,1296,1298,
        5,111,0,0,1297,1299,3,190,95,0,1298,1297,1,0,0,0,1298,1299,1,0,0,
        0,1299,1301,1,0,0,0,1300,1295,1,0,0,0,1301,1304,1,0,0,0,1302,1300,
        1,0,0,0,1302,1303,1,0,0,0,1303,1307,1,0,0,0,1304,1302,1,0,0,0,1305,
        1307,3,200,100,0,1306,1291,1,0,0,0,1306,1305,1,0,0,0,1307,181,1,
        0,0,0,1308,1310,5,111,0,0,1309,1311,3,192,96,0,1310,1309,1,0,0,0,
        1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1313,3,186,93,0,1313,183,
        1,0,0,0,1314,1342,5,65,0,0,1315,1320,5,66,0,0,1316,1317,5,65,0,0,
        1317,1319,5,66,0,0,1318,1316,1,0,0,0,1319,1322,1,0,0,0,1320,1318,
        1,0,0,0,1320,1321,1,0,0,0,1321,1323,1,0,0,0,1322,1320,1,0,0,0,1323,
        1343,3,76,38,0,1324,1325,3,166,83,0,1325,1332,5,66,0,0,1326,1327,
        5,65,0,0,1327,1328,3,166,83,0,1328,1329,5,66,0,0,1329,1331,1,0,0,
        0,1330,1326,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,
        1,0,0,0,1333,1339,1,0,0,0,1334,1332,1,0,0,0,1335,1336,5,65,0,0,1336,
        1338,5,66,0,0,1337,1335,1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,
        0,0,1339,1340,1,0,0,0,1340,1343,1,0,0,0,1341,1339,1,0,0,0,1342,1315,
        1,0,0,0,1342,1324,1,0,0,0,1343,185,1,0,0,0,1344,1346,3,208,104,0,
        1345,1347,3,32,16,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,187,
        1,0,0,0,1348,1349,3,194,97,0,1349,1350,3,206,103,0,1350,189,1,0,
        0,0,1351,1352,5,72,0,0,1352,1355,5,71,0,0,1353,1355,3,202,101,0,
        1354,1351,1,0,0,0,1354,1353,1,0,0,0,1355,191,1,0,0,0,1356,1357,5,
        72,0,0,1357,1360,5,71,0,0,1358,1360,3,194,97,0,1359,1356,1,0,0,0,
        1359,1358,1,0,0,0,1360,193,1,0,0,0,1361,1362,5,72,0,0,1362,1363,
        3,196,98,0,1363,1364,5,71,0,0,1364,195,1,0,0,0,1365,1370,3,198,99,
        0,1366,1367,5,68,0,0,1367,1369,3,198,99,0,1368,1366,1,0,0,0,1369,
        1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,197,1,0,0,
        0,1372,1370,1,0,0,0,1373,1375,3,102,51,0,1374,1373,1,0,0,0,1375,
        1378,1,0,0,0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,1381,1,0,0,
        0,1378,1376,1,0,0,0,1379,1382,3,78,39,0,1380,1382,3,200,100,0,1381,
        1379,1,0,0,0,1381,1380,1,0,0,0,1382,1393,1,0,0,0,1383,1385,3,102,
        51,0,1384,1383,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,
        1387,1,0,0,0,1387,1389,1,0,0,0,1388,1386,1,0,0,0,1389,1390,5,65,
        0,0,1390,1392,5,66,0,0,1391,1386,1,0,0,0,1392,1395,1,0,0,0,1393,
        1391,1,0,0,0,1393,1394,1,0,0,0,1394,199,1,0,0,0,1395,1393,1,0,0,
        0,1396,1397,7,11,0,0,1397,201,1,0,0,0,1398,1399,5,72,0,0,1399,1404,
        3,80,40,0,1400,1401,5,68,0,0,1401,1403,3,80,40,0,1402,1400,1,0,0,
        0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1407,
        1,0,0,0,1406,1404,1,0,0,0,1407,1408,5,71,0,0,1408,203,1,0,0,0,1409,
        1416,3,208,104,0,1410,1411,5,69,0,0,1411,1413,5,111,0,0,1412,1414,
        3,208,104,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,1416,1,0,0,
        0,1415,1409,1,0,0,0,1415,1410,1,0,0,0,1416,205,1,0,0,0,1417,1418,
        5,40,0,0,1418,1422,3,204,102,0,1419,1420,5,111,0,0,1420,1422,3,208,
        104,0,1421,1417,1,0,0,0,1421,1419,1,0,0,0,1422,207,1,0,0,0,1423,
        1425,5,61,0,0,1424,1426,3,162,81,0,1425,1424,1,0,0,0,1425,1426,1,
        0,0,0,1426,1427,1,0,0,0,1427,1428,5,62,0,0,1428,209,1,0,0,0,178,
        211,216,222,230,239,244,251,258,261,268,278,282,287,291,295,305,
        313,321,325,332,339,343,346,349,358,364,369,372,378,384,388,396,
        405,412,418,422,433,442,447,453,457,469,480,485,494,502,512,521,
        529,534,542,547,557,567,573,580,585,593,597,599,605,610,614,621,
        627,629,636,641,650,655,658,663,672,679,690,699,709,718,723,726,
        733,743,751,754,757,770,778,783,791,795,799,803,805,809,815,826,
        836,841,850,855,858,865,874,897,900,903,911,915,923,929,940,949,
        954,964,971,984,993,1002,1008,1019,1024,1029,1034,1038,1042,1046,
        1048,1052,1057,1074,1080,1086,1092,1095,1106,1121,1125,1130,1134,
        1150,1190,1196,1211,1214,1216,1226,1235,1239,1243,1261,1263,1268,
        1273,1278,1287,1289,1293,1298,1302,1306,1310,1320,1332,1339,1342,
        1346,1354,1359,1370,1376,1381,1386,1393,1404,1413,1415,1421,1425
    ]

class JavaParserLabeled ( Parser ):

    grammarFileName = "JavaParserLabeled.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'null'", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", 
                     "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", 
                     "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                     "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", 
                     "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", 
                     "'>>='", "'>>>='", "'->'", "'::'", "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
                      "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
                      "BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", 
                      "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", 
                      "LINE_COMMENT", "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_typeParameters = 8
    RULE_typeParameter = 9
    RULE_typeBound = 10
    RULE_enumDeclaration = 11
    RULE_enumConstants = 12
    RULE_enumConstant = 13
    RULE_enumBodyDeclarations = 14
    RULE_interfaceDeclaration = 15
    RULE_classBody = 16
    RULE_interfaceBody = 17
    RULE_classBodyDeclaration = 18
    RULE_memberDeclaration = 19
    RULE_methodDeclaration = 20
    RULE_methodBody = 21
    RULE_typeTypeOrVoid = 22
    RULE_genericMethodDeclaration = 23
    RULE_genericConstructorDeclaration = 24
    RULE_constructorDeclaration = 25
    RULE_fieldDeclaration = 26
    RULE_interfaceBodyDeclaration = 27
    RULE_interfaceMemberDeclaration = 28
    RULE_constDeclaration = 29
    RULE_constantDeclarator = 30
    RULE_interfaceMethodDeclaration = 31
    RULE_interfaceMethodModifier = 32
    RULE_genericInterfaceMethodDeclaration = 33
    RULE_variableDeclarators = 34
    RULE_variableDeclarator = 35
    RULE_variableDeclaratorId = 36
    RULE_variableInitializer = 37
    RULE_arrayInitializer = 38
    RULE_classOrInterfaceType = 39
    RULE_typeArgument = 40
    RULE_qualifiedNameList = 41
    RULE_formalParameters = 42
    RULE_formalParameterList = 43
    RULE_formalParameter = 44
    RULE_lastFormalParameter = 45
    RULE_qualifiedName = 46
    RULE_literal = 47
    RULE_integerLiteral = 48
    RULE_floatLiteral = 49
    RULE_altAnnotationQualifiedName = 50
    RULE_annotation = 51
    RULE_elementValuePairs = 52
    RULE_elementValuePair = 53
    RULE_elementValue = 54
    RULE_elementValueArrayInitializer = 55
    RULE_annotationTypeDeclaration = 56
    RULE_annotationTypeBody = 57
    RULE_annotationTypeElementDeclaration = 58
    RULE_annotationTypeElementRest = 59
    RULE_annotationMethodOrConstantRest = 60
    RULE_annotationMethodRest = 61
    RULE_annotationConstantRest = 62
    RULE_defaultValue = 63
    RULE_block = 64
    RULE_blockStatement = 65
    RULE_localVariableDeclaration = 66
    RULE_localTypeDeclaration = 67
    RULE_statement = 68
    RULE_catchClause = 69
    RULE_catchType = 70
    RULE_finallyBlock = 71
    RULE_resourceSpecification = 72
    RULE_resources = 73
    RULE_resource = 74
    RULE_switchBlockStatementGroup = 75
    RULE_switchLabel = 76
    RULE_forControl = 77
    RULE_forInit = 78
    RULE_enhancedForControl = 79
    RULE_parExpression = 80
    RULE_expressionList = 81
    RULE_methodCall = 82
    RULE_expression = 83
    RULE_lambdaExpression = 84
    RULE_lambdaParameters = 85
    RULE_lambdaBody = 86
    RULE_primary = 87
    RULE_classType = 88
    RULE_creator = 89
    RULE_createdName = 90
    RULE_innerCreator = 91
    RULE_arrayCreatorRest = 92
    RULE_classCreatorRest = 93
    RULE_explicitGenericInvocation = 94
    RULE_typeArgumentsOrDiamond = 95
    RULE_nonWildcardTypeArgumentsOrDiamond = 96
    RULE_nonWildcardTypeArguments = 97
    RULE_typeList = 98
    RULE_typeType = 99
    RULE_primitiveType = 100
    RULE_typeArguments = 101
    RULE_superSuffix = 102
    RULE_explicitGenericInvocationSuffix = 103
    RULE_arguments = 104

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                   "constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
                   "interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "interfaceMethodModifier", 
                   "genericInterfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "classOrInterfaceType", "typeArgument", 
                   "qualifiedNameList", "formalParameters", "formalParameterList", 
                   "formalParameter", "lastFormalParameter", "qualifiedName", 
                   "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
                   "annotation", "elementValuePairs", "elementValuePair", 
                   "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "localTypeDeclaration", "statement", "catchClause", "catchType", 
                   "finallyBlock", "resourceSpecification", "resources", 
                   "resource", "switchBlockStatementGroup", "switchLabel", 
                   "forControl", "forInit", "enhancedForControl", "parExpression", 
                   "expressionList", "methodCall", "expression", "lambdaExpression", 
                   "lambdaParameters", "lambdaBody", "primary", "classType", 
                   "creator", "createdName", "innerCreator", "arrayCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    DECIMAL_LITERAL=51
    HEX_LITERAL=52
    OCT_LITERAL=53
    BINARY_LITERAL=54
    FLOAT_LITERAL=55
    HEX_FLOAT_LITERAL=56
    BOOL_LITERAL=57
    CHAR_LITERAL=58
    STRING_LITERAL=59
    NULL_LITERAL=60
    LPAREN=61
    RPAREN=62
    LBRACE=63
    RBRACE=64
    LBRACK=65
    RBRACK=66
    SEMI=67
    COMMA=68
    DOT=69
    ASSIGN=70
    GT=71
    LT=72
    BANG=73
    TILDE=74
    QUESTION=75
    COLON=76
    EQUAL=77
    LE=78
    GE=79
    NOTEQUAL=80
    AND=81
    OR=82
    INC=83
    DEC=84
    ADD=85
    SUB=86
    MUL=87
    DIV=88
    BITAND=89
    BITOR=90
    CARET=91
    MOD=92
    ADD_ASSIGN=93
    SUB_ASSIGN=94
    MUL_ASSIGN=95
    DIV_ASSIGN=96
    AND_ASSIGN=97
    OR_ASSIGN=98
    XOR_ASSIGN=99
    MOD_ASSIGN=100
    LSHIFT_ASSIGN=101
    RSHIFT_ASSIGN=102
    URSHIFT_ASSIGN=103
    ARROW=104
    COLONCOLON=105
    AT=106
    ELLIPSIS=107
    WS=108
    COMMENT=109
    LINE_COMMENT=110
    IDENTIFIER=111

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaParserLabeled.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = JavaParserLabeled.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 210
                self.packageDeclaration()


            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.IMPORT:
                self.state = 213
                self.importDeclaration()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.ENUM) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0):
                self.state = 219
                self.typeDeclaration()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(JavaParserLabeled.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParserLabeled.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageDeclaration" ):
                return visitor.visitPackageDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def packageDeclaration(self):

        localctx = JavaParserLabeled.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                self.state = 227
                self.annotation()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(JavaParserLabeled.PACKAGE)
            self.state = 234
            self.qualifiedName()
            self.state = 235
            self.match(JavaParserLabeled.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParserLabeled.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParserLabeled.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParserLabeled.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParserLabeled.MUL, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = JavaParserLabeled.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(JavaParserLabeled.IMPORT)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.STATIC:
                self.state = 238
                self.match(JavaParserLabeled.STATIC)


            self.state = 241
            self.qualifiedName()
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.DOT:
                self.state = 242
                self.match(JavaParserLabeled.DOT)
                self.state = 243
                self.match(JavaParserLabeled.MUL)


            self.state = 246
            self.match(JavaParserLabeled.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ClassOrInterfaceModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDeclaration" ):
                return visitor.visitTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def typeDeclaration(self):

        localctx = JavaParserLabeled.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        try:
            self.state = 261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.ABSTRACT, JavaParserLabeled.CLASS, JavaParserLabeled.ENUM, JavaParserLabeled.FINAL, JavaParserLabeled.INTERFACE, JavaParserLabeled.PRIVATE, JavaParserLabeled.PROTECTED, JavaParserLabeled.PUBLIC, JavaParserLabeled.STATIC, JavaParserLabeled.STRICTFP, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 248
                        self.classOrInterfaceModifier() 
                    self.state = 253
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                self.state = 258
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParserLabeled.CLASS]:
                    self.state = 254
                    self.classDeclaration()
                    pass
                elif token in [JavaParserLabeled.ENUM]:
                    self.state = 255
                    self.enumDeclaration()
                    pass
                elif token in [JavaParserLabeled.INTERFACE]:
                    self.state = 256
                    self.interfaceDeclaration()
                    pass
                elif token in [JavaParserLabeled.AT]:
                    self.state = 257
                    self.annotationTypeDeclaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [JavaParserLabeled.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.match(JavaParserLabeled.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParserLabeled.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParserLabeled.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParserLabeled.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParserLabeled.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = JavaParserLabeled.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        try:
            self.state = 268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.ABSTRACT, JavaParserLabeled.FINAL, JavaParserLabeled.PRIVATE, JavaParserLabeled.PROTECTED, JavaParserLabeled.PUBLIC, JavaParserLabeled.STATIC, JavaParserLabeled.STRICTFP, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.classOrInterfaceModifier()
                pass
            elif token in [JavaParserLabeled.NATIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.match(JavaParserLabeled.NATIVE)
                pass
            elif token in [JavaParserLabeled.SYNCHRONIZED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.match(JavaParserLabeled.SYNCHRONIZED)
                pass
            elif token in [JavaParserLabeled.TRANSIENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 266
                self.match(JavaParserLabeled.TRANSIENT)
                pass
            elif token in [JavaParserLabeled.VOLATILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 267
                self.match(JavaParserLabeled.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParserLabeled.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParserLabeled.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParserLabeled.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParserLabeled.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParserLabeled.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParserLabeled.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParserLabeled.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceModifier" ):
                return visitor.visitClassOrInterfaceModifier(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParserLabeled.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 270
                self.annotation()
                pass
            elif token in [JavaParserLabeled.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 271
                self.match(JavaParserLabeled.PUBLIC)
                pass
            elif token in [JavaParserLabeled.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 272
                self.match(JavaParserLabeled.PROTECTED)
                pass
            elif token in [JavaParserLabeled.PRIVATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 273
                self.match(JavaParserLabeled.PRIVATE)
                pass
            elif token in [JavaParserLabeled.STATIC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 274
                self.match(JavaParserLabeled.STATIC)
                pass
            elif token in [JavaParserLabeled.ABSTRACT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 275
                self.match(JavaParserLabeled.ABSTRACT)
                pass
            elif token in [JavaParserLabeled.FINAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 276
                self.match(JavaParserLabeled.FINAL)
                pass
            elif token in [JavaParserLabeled.STRICTFP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 277
                self.match(JavaParserLabeled.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParserLabeled.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableModifier" ):
                return visitor.visitVariableModifier(self)
            else:
                return visitor.visitChildren(self)




    def variableModifier(self):

        localctx = JavaParserLabeled.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.FINAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.match(JavaParserLabeled.FINAL)
                pass
            elif token in [JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 281
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParserLabeled.CLASS, 0)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParserLabeled.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParserLabeled.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = JavaParserLabeled.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(JavaParserLabeled.CLASS)
            self.state = 285
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LT:
                self.state = 286
                self.typeParameters()


            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.EXTENDS:
                self.state = 289
                self.match(JavaParserLabeled.EXTENDS)
                self.state = 290
                self.typeType()


            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.IMPLEMENTS:
                self.state = 293
                self.match(JavaParserLabeled.IMPLEMENTS)
                self.state = 294
                self.typeList()


            self.state = 297
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParserLabeled.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParserLabeled.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = JavaParserLabeled.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(JavaParserLabeled.LT)
            self.state = 300
            self.typeParameter()
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 301
                self.match(JavaParserLabeled.COMMA)
                self.state = 302
                self.typeParameter()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self.match(JavaParserLabeled.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParserLabeled.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = JavaParserLabeled.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 310
                    self.annotation() 
                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 316
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.EXTENDS:
                self.state = 317
                self.match(JavaParserLabeled.EXTENDS)
                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 318
                        self.annotation() 
                    self.state = 323
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 324
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.BITAND)
            else:
                return self.getToken(JavaParserLabeled.BITAND, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBound" ):
                return visitor.visitTypeBound(self)
            else:
                return visitor.visitChildren(self)




    def typeBound(self):

        localctx = JavaParserLabeled.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.typeType()
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.BITAND:
                self.state = 328
                self.match(JavaParserLabeled.BITAND)
                self.state = 329
                self.typeType()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParserLabeled.ENUM, 0)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParserLabeled.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParserLabeled.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = JavaParserLabeled.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(JavaParserLabeled.ENUM)
            self.state = 336
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.IMPLEMENTS:
                self.state = 337
                self.match(JavaParserLabeled.IMPLEMENTS)
                self.state = 338
                self.typeList()


            self.state = 341
            self.match(JavaParserLabeled.LBRACE)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                self.state = 342
                self.enumConstants()


            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.COMMA:
                self.state = 345
                self.match(JavaParserLabeled.COMMA)


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.SEMI:
                self.state = 348
                self.enumBodyDeclarations()


            self.state = 351
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstants" ):
                return visitor.visitEnumConstants(self)
            else:
                return visitor.visitChildren(self)




    def enumConstants(self):

        localctx = JavaParserLabeled.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.enumConstant()
            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.match(JavaParserLabeled.COMMA)
                    self.state = 355
                    self.enumConstant() 
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstant" ):
                return visitor.visitEnumConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumConstant(self):

        localctx = JavaParserLabeled.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 361
                    self.annotation() 
                self.state = 366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 367
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LPAREN:
                self.state = 368
                self.arguments()


            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LBRACE:
                self.state = 371
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumBodyDeclarations" ):
                return visitor.visitEnumBodyDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def enumBodyDeclarations(self):

        localctx = JavaParserLabeled.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(JavaParserLabeled.SEMI)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.ENUM) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NATIVE) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP) | (1 << JavaParserLabeled.SYNCHRONIZED) | (1 << JavaParserLabeled.TRANSIENT) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.VOLATILE) | (1 << JavaParserLabeled.LBRACE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.LT - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0):
                self.state = 375
                self.classBodyDeclaration()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParserLabeled.INTERFACE, 0)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParserLabeled.EXTENDS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclaration" ):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDeclaration(self):

        localctx = JavaParserLabeled.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(JavaParserLabeled.INTERFACE)
            self.state = 382
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LT:
                self.state = 383
                self.typeParameters()


            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.EXTENDS:
                self.state = 386
                self.match(JavaParserLabeled.EXTENDS)
                self.state = 387
                self.typeList()


            self.state = 390
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = JavaParserLabeled.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(JavaParserLabeled.LBRACE)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.ENUM) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NATIVE) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP) | (1 << JavaParserLabeled.SYNCHRONIZED) | (1 << JavaParserLabeled.TRANSIENT) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.VOLATILE) | (1 << JavaParserLabeled.LBRACE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.LT - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0):
                self.state = 393
                self.classBodyDeclaration()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 399
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBody" ):
                return visitor.visitInterfaceBody(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBody(self):

        localctx = JavaParserLabeled.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(JavaParserLabeled.LBRACE)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.DEFAULT) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.ENUM) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NATIVE) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP) | (1 << JavaParserLabeled.SYNCHRONIZED) | (1 << JavaParserLabeled.TRANSIENT) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.VOLATILE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.LT - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0):
                self.state = 402
                self.interfaceBodyDeclaration()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 408
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classBodyDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ClassBodyDeclaration1Context(ClassBodyDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ClassBodyDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)

        def STATIC(self):
            return self.getToken(JavaParserLabeled.STATIC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration1" ):
                listener.enterClassBodyDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration1" ):
                listener.exitClassBodyDeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration1" ):
                return visitor.visitClassBodyDeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class ClassBodyDeclaration0Context(ClassBodyDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ClassBodyDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration0" ):
                listener.enterClassBodyDeclaration0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration0" ):
                listener.exitClassBodyDeclaration0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration0" ):
                return visitor.visitClassBodyDeclaration0(self)
            else:
                return visitor.visitChildren(self)


    class ClassBodyDeclaration2Context(ClassBodyDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ClassBodyDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.MemberDeclarationContext,0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ModifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration2" ):
                listener.enterClassBodyDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration2" ):
                listener.exitClassBodyDeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration2" ):
                return visitor.visitClassBodyDeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def classBodyDeclaration(self):

        localctx = JavaParserLabeled.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.ClassBodyDeclaration0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.ClassBodyDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.STATIC:
                    self.state = 411
                    self.match(JavaParserLabeled.STATIC)


                self.state = 414
                self.block()
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.ClassBodyDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 415
                        self.modifier() 
                    self.state = 420
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 421
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_memberDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MemberDeclaration8Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnumDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration8" ):
                listener.enterMemberDeclaration8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration8" ):
                listener.exitMemberDeclaration8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration8" ):
                return visitor.visitMemberDeclaration8(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration0Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.MethodDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration0" ):
                listener.enterMemberDeclaration0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration0" ):
                listener.exitMemberDeclaration0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration0" ):
                return visitor.visitMemberDeclaration0(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration1Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.GenericMethodDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration1" ):
                listener.enterMemberDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration1" ):
                listener.exitMemberDeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration1" ):
                return visitor.visitMemberDeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration2Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.FieldDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration2" ):
                listener.enterMemberDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration2" ):
                listener.exitMemberDeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration2" ):
                return visitor.visitMemberDeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration3Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ConstructorDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration3" ):
                listener.enterMemberDeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration3" ):
                listener.exitMemberDeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration3" ):
                return visitor.visitMemberDeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration4Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.GenericConstructorDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration4" ):
                listener.enterMemberDeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration4" ):
                listener.exitMemberDeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration4" ):
                return visitor.visitMemberDeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration5Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration5" ):
                listener.enterMemberDeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration5" ):
                listener.exitMemberDeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration5" ):
                return visitor.visitMemberDeclaration5(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration6Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration6" ):
                listener.enterMemberDeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration6" ):
                listener.exitMemberDeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration6" ):
                return visitor.visitMemberDeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class MemberDeclaration7Context(MemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration7" ):
                listener.enterMemberDeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration7" ):
                listener.exitMemberDeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration7" ):
                return visitor.visitMemberDeclaration7(self)
            else:
                return visitor.visitChildren(self)



    def memberDeclaration(self):

        localctx = JavaParserLabeled.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_memberDeclaration)
        try:
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.MemberDeclaration0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.methodDeclaration()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.MemberDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.genericMethodDeclaration()
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.MemberDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                localctx = JavaParserLabeled.MemberDeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 427
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                localctx = JavaParserLabeled.MemberDeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 428
                self.genericConstructorDeclaration()
                pass

            elif la_ == 6:
                localctx = JavaParserLabeled.MemberDeclaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 429
                self.interfaceDeclaration()
                pass

            elif la_ == 7:
                localctx = JavaParserLabeled.MemberDeclaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 430
                self.annotationTypeDeclaration()
                pass

            elif la_ == 8:
                localctx = JavaParserLabeled.MemberDeclaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 431
                self.classDeclaration()
                pass

            elif la_ == 9:
                localctx = JavaParserLabeled.MemberDeclaration8Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 432
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeOrVoidContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LBRACK)
            else:
                return self.getToken(JavaParserLabeled.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.RBRACK)
            else:
                return self.getToken(JavaParserLabeled.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParserLabeled.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JavaParserLabeled.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.typeTypeOrVoid()
            self.state = 436
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 437
            self.formalParameters()
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.LBRACK:
                self.state = 438
                self.match(JavaParserLabeled.LBRACK)
                self.state = 439
                self.match(JavaParserLabeled.RBRACK)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.THROWS:
                self.state = 445
                self.match(JavaParserLabeled.THROWS)
                self.state = 446
                self.qualifiedNameList()


            self.state = 449
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JavaParserLabeled.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodBody)
        try:
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.block()
                pass
            elif token in [JavaParserLabeled.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.match(JavaParserLabeled.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParserLabeled.VOID, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVoid" ):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVoid(self):

        localctx = JavaParserLabeled.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeTypeOrVoid)
        try:
            self.state = 457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.SHORT, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.typeType()
                pass
            elif token in [JavaParserLabeled.VOID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.match(JavaParserLabeled.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMethodDeclaration" ):
                return visitor.visitGenericMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericMethodDeclaration(self):

        localctx = JavaParserLabeled.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.typeParameters()
            self.state = 460
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericConstructorDeclaration" ):
                return visitor.visitGenericConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParserLabeled.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.typeParameters()
            self.state = 463
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParserLabeled.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDeclaration" ):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constructorDeclaration(self):

        localctx = JavaParserLabeled.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 466
            self.formalParameters()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.THROWS:
                self.state = 467
                self.match(JavaParserLabeled.THROWS)
                self.state = 468
                self.qualifiedNameList()


            self.state = 471
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JavaParserLabeled.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.typeType()
            self.state = 474
            self.variableDeclarators()
            self.state = 475
            self.match(JavaParserLabeled.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBodyDeclaration" ):
                return visitor.visitInterfaceBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParserLabeled.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.ABSTRACT, JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.CLASS, JavaParserLabeled.DEFAULT, JavaParserLabeled.DOUBLE, JavaParserLabeled.ENUM, JavaParserLabeled.FINAL, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.INTERFACE, JavaParserLabeled.LONG, JavaParserLabeled.NATIVE, JavaParserLabeled.PRIVATE, JavaParserLabeled.PROTECTED, JavaParserLabeled.PUBLIC, JavaParserLabeled.SHORT, JavaParserLabeled.STATIC, JavaParserLabeled.STRICTFP, JavaParserLabeled.SYNCHRONIZED, JavaParserLabeled.TRANSIENT, JavaParserLabeled.VOID, JavaParserLabeled.VOLATILE, JavaParserLabeled.LT, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 477
                        self.modifier() 
                    self.state = 482
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                self.state = 483
                self.interfaceMemberDeclaration()
                pass
            elif token in [JavaParserLabeled.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.match(JavaParserLabeled.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_interfaceMemberDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InterfaceMemberDeclaration6Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnumDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration6" ):
                listener.enterInterfaceMemberDeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration6" ):
                listener.exitInterfaceMemberDeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration6" ):
                return visitor.visitInterfaceMemberDeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceMemberDeclaration5Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration5" ):
                listener.enterInterfaceMemberDeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration5" ):
                listener.exitInterfaceMemberDeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration5" ):
                return visitor.visitInterfaceMemberDeclaration5(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceMemberDeclaration4Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration4" ):
                listener.enterInterfaceMemberDeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration4" ):
                listener.exitInterfaceMemberDeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration4" ):
                return visitor.visitInterfaceMemberDeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceMemberDeclaration3Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration3" ):
                listener.enterInterfaceMemberDeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration3" ):
                listener.exitInterfaceMemberDeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration3" ):
                return visitor.visitInterfaceMemberDeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceMemberDeclaration2Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.GenericInterfaceMethodDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration2" ):
                listener.enterInterfaceMemberDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration2" ):
                listener.exitInterfaceMemberDeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration2" ):
                return visitor.visitInterfaceMemberDeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceMemberDeclaration1Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceMethodDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration1" ):
                listener.enterInterfaceMemberDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration1" ):
                listener.exitInterfaceMemberDeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration1" ):
                return visitor.visitInterfaceMemberDeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceMemberDeclaration0Context(InterfaceMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.InterfaceMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ConstDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration0" ):
                listener.enterInterfaceMemberDeclaration0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration0" ):
                listener.exitInterfaceMemberDeclaration0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration0" ):
                return visitor.visitInterfaceMemberDeclaration0(self)
            else:
                return visitor.visitChildren(self)



    def interfaceMemberDeclaration(self):

        localctx = JavaParserLabeled.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.constDeclaration()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 4:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 491
                self.annotationTypeDeclaration()
                pass

            elif la_ == 6:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 492
                self.classDeclaration()
                pass

            elif la_ == 7:
                localctx = JavaParserLabeled.InterfaceMemberDeclaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 493
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = JavaParserLabeled.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.typeType()
            self.state = 497
            self.constantDeclarator()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 498
                self.match(JavaParserLabeled.COMMA)
                self.state = 499
                self.constantDeclarator()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 505
            self.match(JavaParserLabeled.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(JavaParserLabeled.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LBRACK)
            else:
                return self.getToken(JavaParserLabeled.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.RBRACK)
            else:
                return self.getToken(JavaParserLabeled.RBRACK, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclarator" ):
                return visitor.visitConstantDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclarator(self):

        localctx = JavaParserLabeled.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.LBRACK:
                self.state = 508
                self.match(JavaParserLabeled.LBRACK)
                self.state = 509
                self.match(JavaParserLabeled.RBRACK)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self.match(JavaParserLabeled.ASSIGN)
            self.state = 516
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.MethodBodyContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeOrVoidContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeParametersContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.InterfaceMethodModifierContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LBRACK)
            else:
                return self.getToken(JavaParserLabeled.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.RBRACK)
            else:
                return self.getToken(JavaParserLabeled.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParserLabeled.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameListContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodDeclaration" ):
                return visitor.visitInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParserLabeled.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_interfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 518
                    self.interfaceMethodModifier() 
                self.state = 523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.SHORT, JavaParserLabeled.VOID, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.state = 524
                self.typeTypeOrVoid()
                pass
            elif token in [JavaParserLabeled.LT]:
                self.state = 525
                self.typeParameters()
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 526
                        self.annotation() 
                    self.state = 531
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                self.state = 532
                self.typeTypeOrVoid()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 536
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 537
            self.formalParameters()
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.LBRACK:
                self.state = 538
                self.match(JavaParserLabeled.LBRACK)
                self.state = 539
                self.match(JavaParserLabeled.RBRACK)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.THROWS:
                self.state = 545
                self.match(JavaParserLabeled.THROWS)
                self.state = 546
                self.qualifiedNameList()


            self.state = 549
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParserLabeled.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParserLabeled.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParserLabeled.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParserLabeled.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParserLabeled.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodModifier" ):
                return visitor.visitInterfaceMethodModifier(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodModifier(self):

        localctx = JavaParserLabeled.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMethodModifier)
        try:
            self.state = 557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.annotation()
                pass
            elif token in [JavaParserLabeled.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.match(JavaParserLabeled.PUBLIC)
                pass
            elif token in [JavaParserLabeled.ABSTRACT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 553
                self.match(JavaParserLabeled.ABSTRACT)
                pass
            elif token in [JavaParserLabeled.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 554
                self.match(JavaParserLabeled.DEFAULT)
                pass
            elif token in [JavaParserLabeled.STATIC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 555
                self.match(JavaParserLabeled.STATIC)
                pass
            elif token in [JavaParserLabeled.STRICTFP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 556
                self.match(JavaParserLabeled.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeParametersContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceMethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericInterfaceMethodDeclaration" ):
                return visitor.visitGenericInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParserLabeled.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_genericInterfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.typeParameters()
            self.state = 560
            self.interfaceMethodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JavaParserLabeled.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.variableDeclarator()
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 563
                self.match(JavaParserLabeled.COMMA)
                self.state = 564
                self.variableDeclarator()
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParserLabeled.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JavaParserLabeled.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.variableDeclaratorId()
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.ASSIGN:
                self.state = 571
                self.match(JavaParserLabeled.ASSIGN)
                self.state = 572
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LBRACK)
            else:
                return self.getToken(JavaParserLabeled.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.RBRACK)
            else:
                return self.getToken(JavaParserLabeled.RBRACK, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JavaParserLabeled.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.LBRACK:
                self.state = 576
                self.match(JavaParserLabeled.LBRACK)
                self.state = 577
                self.match(JavaParserLabeled.RBRACK)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_variableInitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VariableInitializer1Context(VariableInitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.VariableInitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer1" ):
                listener.enterVariableInitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer1" ):
                listener.exitVariableInitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer1" ):
                return visitor.visitVariableInitializer1(self)
            else:
                return visitor.visitChildren(self)


    class VariableInitializer0Context(VariableInitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.VariableInitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArrayInitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer0" ):
                listener.enterVariableInitializer0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer0" ):
                listener.exitVariableInitializer0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer0" ):
                return visitor.visitVariableInitializer0(self)
            else:
                return visitor.visitChildren(self)



    def variableInitializer(self):

        localctx = JavaParserLabeled.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableInitializer)
        try:
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.LBRACE]:
                localctx = JavaParserLabeled.VariableInitializer0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.arrayInitializer()
                pass
            elif token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.NEW, JavaParserLabeled.SHORT, JavaParserLabeled.SUPER, JavaParserLabeled.THIS, JavaParserLabeled.VOID, JavaParserLabeled.DECIMAL_LITERAL, JavaParserLabeled.HEX_LITERAL, JavaParserLabeled.OCT_LITERAL, JavaParserLabeled.BINARY_LITERAL, JavaParserLabeled.FLOAT_LITERAL, JavaParserLabeled.HEX_FLOAT_LITERAL, JavaParserLabeled.BOOL_LITERAL, JavaParserLabeled.CHAR_LITERAL, JavaParserLabeled.STRING_LITERAL, JavaParserLabeled.NULL_LITERAL, JavaParserLabeled.LPAREN, JavaParserLabeled.LT, JavaParserLabeled.BANG, JavaParserLabeled.TILDE, JavaParserLabeled.INC, JavaParserLabeled.DEC, JavaParserLabeled.ADD, JavaParserLabeled.SUB, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                localctx = JavaParserLabeled.VariableInitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JavaParserLabeled.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(JavaParserLabeled.LBRACE)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN) | (1 << JavaParserLabeled.LBRACE))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                self.state = 588
                self.variableInitializer()
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 589
                        self.match(JavaParserLabeled.COMMA)
                        self.state = 590
                        self.variableInitializer() 
                    self.state = 595
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.COMMA:
                    self.state = 596
                    self.match(JavaParserLabeled.COMMA)




            self.state = 601
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.IDENTIFIER)
            else:
                return self.getToken(JavaParserLabeled.IDENTIFIER, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.DOT)
            else:
                return self.getToken(JavaParserLabeled.DOT, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceType" ):
                return visitor.visitClassOrInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceType(self):

        localctx = JavaParserLabeled.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 604
                self.typeArguments()


            self.state = 614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 607
                    self.match(JavaParserLabeled.DOT)
                    self.state = 608
                    self.match(JavaParserLabeled.IDENTIFIER)
                    self.state = 610
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        self.state = 609
                        self.typeArguments()

             
                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypeArgument0Context(TypeArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.TypeArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)

        def QUESTION(self):
            return self.getToken(JavaParserLabeled.QUESTION, 0)
        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)

        def EXTENDS(self):
            return self.getToken(JavaParserLabeled.EXTENDS, 0)
        def SUPER(self):
            return self.getToken(JavaParserLabeled.SUPER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument0" ):
                listener.enterTypeArgument0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument0" ):
                listener.exitTypeArgument0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument0" ):
                return visitor.visitTypeArgument0(self)
            else:
                return visitor.visitChildren(self)



    def typeArgument(self):

        localctx = JavaParserLabeled.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.TypeArgument0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.typeType()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.TypeArgument0Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                    self.state = 618
                    self.annotation()
                    self.state = 623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 624
                self.match(JavaParserLabeled.QUESTION)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.EXTENDS or _la==JavaParserLabeled.SUPER:
                    self.state = 625
                    _la = self._input.LA(1)
                    if not(_la==JavaParserLabeled.EXTENDS or _la==JavaParserLabeled.SUPER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 626
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JavaParserLabeled.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.qualifiedName()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 632
                self.match(JavaParserLabeled.COMMA)
                self.state = 633
                self.qualifiedName()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParserLabeled.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JavaParserLabeled.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(JavaParserLabeled.LPAREN)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.SHORT))) != 0) or _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                self.state = 640
                self.formalParameterList()


            self.state = 643
            self.match(JavaParserLabeled.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_formalParameterList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FormalParameterList1Context(FormalParameterListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.FormalParameterListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParserLabeled.LastFormalParameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList1" ):
                listener.enterFormalParameterList1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList1" ):
                listener.exitFormalParameterList1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList1" ):
                return visitor.visitFormalParameterList1(self)
            else:
                return visitor.visitChildren(self)


    class FormalParameterList0Context(FormalParameterListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.FormalParameterListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.FormalParameterContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)
        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParserLabeled.LastFormalParameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList0" ):
                listener.enterFormalParameterList0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList0" ):
                listener.exitFormalParameterList0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList0" ):
                return visitor.visitFormalParameterList0(self)
            else:
                return visitor.visitChildren(self)



    def formalParameterList(self):

        localctx = JavaParserLabeled.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.FormalParameterList0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.formalParameter()
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 646
                        self.match(JavaParserLabeled.COMMA)
                        self.state = 647
                        self.formalParameter() 
                    self.state = 652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.COMMA:
                    self.state = 653
                    self.match(JavaParserLabeled.COMMA)
                    self.state = 654
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.FormalParameterList1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JavaParserLabeled.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self.variableModifier() 
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 666
            self.typeType()
            self.state = 667
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParserLabeled.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameter" ):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameter(self):

        localctx = JavaParserLabeled.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 669
                    self.variableModifier() 
                self.state = 674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 675
            self.typeType()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                self.state = 676
                self.annotation()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.match(JavaParserLabeled.ELLIPSIS)
            self.state = 683
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.IDENTIFIER)
            else:
                return self.getToken(JavaParserLabeled.IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.DOT)
            else:
                return self.getToken(JavaParserLabeled.DOT, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JavaParserLabeled.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 686
                    self.match(JavaParserLabeled.DOT)
                    self.state = 687
                    self.match(JavaParserLabeled.IDENTIFIER) 
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Literal2Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(JavaParserLabeled.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral2" ):
                listener.enterLiteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral2" ):
                listener.exitLiteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral2" ):
                return visitor.visitLiteral2(self)
            else:
                return visitor.visitChildren(self)


    class Literal1Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParserLabeled.FloatLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral1" ):
                listener.enterLiteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral1" ):
                listener.exitLiteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral1" ):
                return visitor.visitLiteral1(self)
            else:
                return visitor.visitChildren(self)


    class Literal0Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParserLabeled.IntegerLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral0" ):
                listener.enterLiteral0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral0" ):
                listener.exitLiteral0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral0" ):
                return visitor.visitLiteral0(self)
            else:
                return visitor.visitChildren(self)


    class Literal5Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL_LITERAL(self):
            return self.getToken(JavaParserLabeled.NULL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral5" ):
                listener.enterLiteral5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral5" ):
                listener.exitLiteral5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral5" ):
                return visitor.visitLiteral5(self)
            else:
                return visitor.visitChildren(self)


    class Literal4Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParserLabeled.BOOL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral4" ):
                listener.enterLiteral4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral4" ):
                listener.exitLiteral4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral4" ):
                return visitor.visitLiteral4(self)
            else:
                return visitor.visitChildren(self)


    class Literal3Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING_LITERAL(self):
            return self.getToken(JavaParserLabeled.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral3" ):
                listener.enterLiteral3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral3" ):
                listener.exitLiteral3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral3" ):
                return visitor.visitLiteral3(self)
            else:
                return visitor.visitChildren(self)



    def literal(self):

        localctx = JavaParserLabeled.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_literal)
        try:
            self.state = 699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.DECIMAL_LITERAL, JavaParserLabeled.HEX_LITERAL, JavaParserLabeled.OCT_LITERAL, JavaParserLabeled.BINARY_LITERAL]:
                localctx = JavaParserLabeled.Literal0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.integerLiteral()
                pass
            elif token in [JavaParserLabeled.FLOAT_LITERAL, JavaParserLabeled.HEX_FLOAT_LITERAL]:
                localctx = JavaParserLabeled.Literal1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.floatLiteral()
                pass
            elif token in [JavaParserLabeled.CHAR_LITERAL]:
                localctx = JavaParserLabeled.Literal2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.match(JavaParserLabeled.CHAR_LITERAL)
                pass
            elif token in [JavaParserLabeled.STRING_LITERAL]:
                localctx = JavaParserLabeled.Literal3Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                self.match(JavaParserLabeled.STRING_LITERAL)
                pass
            elif token in [JavaParserLabeled.BOOL_LITERAL]:
                localctx = JavaParserLabeled.Literal4Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 697
                self.match(JavaParserLabeled.BOOL_LITERAL)
                pass
            elif token in [JavaParserLabeled.NULL_LITERAL]:
                localctx = JavaParserLabeled.Literal5Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 698
                self.match(JavaParserLabeled.NULL_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParserLabeled.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParserLabeled.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParserLabeled.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParserLabeled.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = JavaParserLabeled.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParserLabeled.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParserLabeled.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = JavaParserLabeled.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            _la = self._input.LA(1)
            if not(_la==JavaParserLabeled.FLOAT_LITERAL or _la==JavaParserLabeled.HEX_FLOAT_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParserLabeled.AT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.IDENTIFIER)
            else:
                return self.getToken(JavaParserLabeled.IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.DOT)
            else:
                return self.getToken(JavaParserLabeled.DOT, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAltAnnotationQualifiedName" ):
                return visitor.visitAltAnnotationQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParserLabeled.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.IDENTIFIER:
                self.state = 705
                self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 706
                self.match(JavaParserLabeled.DOT)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 712
            self.match(JavaParserLabeled.AT)
            self.state = 713
            self.match(JavaParserLabeled.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParserLabeled.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaParserLabeled.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParserLabeled.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParserLabeled.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = JavaParserLabeled.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 715
                self.match(JavaParserLabeled.AT)
                self.state = 716
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 717
                self.altAnnotationQualifiedName()
                pass


            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LPAREN:
                self.state = 720
                self.match(JavaParserLabeled.LPAREN)
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 721
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 722
                    self.elementValue()


                self.state = 725
                self.match(JavaParserLabeled.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePairs" ):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePairs(self):

        localctx = JavaParserLabeled.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.elementValuePair()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 729
                self.match(JavaParserLabeled.COMMA)
                self.state = 730
                self.elementValuePair()
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(JavaParserLabeled.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParserLabeled.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePair" ):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePair(self):

        localctx = JavaParserLabeled.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 737
            self.match(JavaParserLabeled.ASSIGN)
            self.state = 738
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_elementValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ElementValue0Context(ElementValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ElementValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue0" ):
                listener.enterElementValue0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue0" ):
                listener.exitElementValue0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue0" ):
                return visitor.visitElementValue0(self)
            else:
                return visitor.visitChildren(self)


    class ElementValue2Context(ElementValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ElementValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParserLabeled.ElementValueArrayInitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue2" ):
                listener.enterElementValue2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue2" ):
                listener.exitElementValue2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue2" ):
                return visitor.visitElementValue2(self)
            else:
                return visitor.visitChildren(self)


    class ElementValue1Context(ElementValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ElementValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annotation(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue1" ):
                listener.enterElementValue1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue1" ):
                listener.exitElementValue1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue1" ):
                return visitor.visitElementValue1(self)
            else:
                return visitor.visitChildren(self)



    def elementValue(self):

        localctx = JavaParserLabeled.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_elementValue)
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.ElementValue0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.ElementValue1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.annotation()
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.ElementValue2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParserLabeled.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(JavaParserLabeled.LBRACE)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN) | (1 << JavaParserLabeled.LBRACE))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                self.state = 746
                self.elementValue()
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 747
                        self.match(JavaParserLabeled.COMMA)
                        self.state = 748
                        self.elementValue() 
                    self.state = 753
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)



            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.COMMA:
                self.state = 756
                self.match(JavaParserLabeled.COMMA)


            self.state = 759
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParserLabeled.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParserLabeled.INTERFACE, 0)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeDeclaration" ):
                return visitor.visitAnnotationTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParserLabeled.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(JavaParserLabeled.AT)
            self.state = 762
            self.match(JavaParserLabeled.INTERFACE)
            self.state = 763
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 764
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeBody" ):
                return visitor.visitAnnotationTypeBody(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeBody(self):

        localctx = JavaParserLabeled.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(JavaParserLabeled.LBRACE)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.ENUM) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NATIVE) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP) | (1 << JavaParserLabeled.SYNCHRONIZED) | (1 << JavaParserLabeled.TRANSIENT) | (1 << JavaParserLabeled.VOLATILE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0):
                self.state = 767
                self.annotationTypeElementDeclaration()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 773
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementDeclaration" ):
                return visitor.visitAnnotationTypeElementDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParserLabeled.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.ABSTRACT, JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.CLASS, JavaParserLabeled.DOUBLE, JavaParserLabeled.ENUM, JavaParserLabeled.FINAL, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.INTERFACE, JavaParserLabeled.LONG, JavaParserLabeled.NATIVE, JavaParserLabeled.PRIVATE, JavaParserLabeled.PROTECTED, JavaParserLabeled.PUBLIC, JavaParserLabeled.SHORT, JavaParserLabeled.STATIC, JavaParserLabeled.STRICTFP, JavaParserLabeled.SYNCHRONIZED, JavaParserLabeled.TRANSIENT, JavaParserLabeled.VOLATILE, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 775
                        self.modifier() 
                    self.state = 780
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 781
                self.annotationTypeElementRest()
                pass
            elif token in [JavaParserLabeled.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(JavaParserLabeled.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationTypeElementRest

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnnotationTypeElementRest0Context(AnnotationTypeElementRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationTypeElementRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)

        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationMethodOrConstantRestContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest0" ):
                listener.enterAnnotationTypeElementRest0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest0" ):
                listener.exitAnnotationTypeElementRest0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest0" ):
                return visitor.visitAnnotationTypeElementRest0(self)
            else:
                return visitor.visitChildren(self)


    class AnnotationTypeElementRest1Context(AnnotationTypeElementRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationTypeElementRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassDeclarationContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest1" ):
                listener.enterAnnotationTypeElementRest1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest1" ):
                listener.exitAnnotationTypeElementRest1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest1" ):
                return visitor.visitAnnotationTypeElementRest1(self)
            else:
                return visitor.visitChildren(self)


    class AnnotationTypeElementRest2Context(AnnotationTypeElementRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationTypeElementRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceDeclarationContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest2" ):
                listener.enterAnnotationTypeElementRest2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest2" ):
                listener.exitAnnotationTypeElementRest2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest2" ):
                return visitor.visitAnnotationTypeElementRest2(self)
            else:
                return visitor.visitChildren(self)


    class AnnotationTypeElementRest3Context(AnnotationTypeElementRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationTypeElementRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnumDeclarationContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest3" ):
                listener.enterAnnotationTypeElementRest3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest3" ):
                listener.exitAnnotationTypeElementRest3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest3" ):
                return visitor.visitAnnotationTypeElementRest3(self)
            else:
                return visitor.visitChildren(self)


    class AnnotationTypeElementRest4Context(AnnotationTypeElementRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationTypeElementRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationTypeDeclarationContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest4" ):
                listener.enterAnnotationTypeElementRest4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest4" ):
                listener.exitAnnotationTypeElementRest4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest4" ):
                return visitor.visitAnnotationTypeElementRest4(self)
            else:
                return visitor.visitChildren(self)



    def annotationTypeElementRest(self):

        localctx = JavaParserLabeled.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_annotationTypeElementRest)
        try:
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.AnnotationTypeElementRest0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.typeType()
                self.state = 786
                self.annotationMethodOrConstantRest()
                self.state = 787
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.AnnotationTypeElementRest1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.classDeclaration()
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.match(JavaParserLabeled.SEMI)


                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.AnnotationTypeElementRest2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 793
                self.interfaceDeclaration()
                self.state = 795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 794
                    self.match(JavaParserLabeled.SEMI)


                pass

            elif la_ == 4:
                localctx = JavaParserLabeled.AnnotationTypeElementRest3Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 797
                self.enumDeclaration()
                self.state = 799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 798
                    self.match(JavaParserLabeled.SEMI)


                pass

            elif la_ == 5:
                localctx = JavaParserLabeled.AnnotationTypeElementRest4Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 801
                self.annotationTypeDeclaration()
                self.state = 803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 802
                    self.match(JavaParserLabeled.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationMethodOrConstantRest

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnnotationMethodOrConstantRest0Context(AnnotationMethodOrConstantRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationMethodOrConstantRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationMethodRestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest0" ):
                listener.enterAnnotationMethodOrConstantRest0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest0" ):
                listener.exitAnnotationMethodOrConstantRest0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodOrConstantRest0" ):
                return visitor.visitAnnotationMethodOrConstantRest0(self)
            else:
                return visitor.visitChildren(self)


    class AnnotationMethodOrConstantRest1Context(AnnotationMethodOrConstantRestContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.AnnotationMethodOrConstantRestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.AnnotationConstantRestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest1" ):
                listener.enterAnnotationMethodOrConstantRest1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest1" ):
                listener.exitAnnotationMethodOrConstantRest1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodOrConstantRest1" ):
                return visitor.visitAnnotationMethodOrConstantRest1(self)
            else:
                return visitor.visitChildren(self)



    def annotationMethodOrConstantRest(self):

        localctx = JavaParserLabeled.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.AnnotationMethodOrConstantRest0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.AnnotationMethodOrConstantRest1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParserLabeled.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodRest" ):
                return visitor.visitAnnotationMethodRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodRest(self):

        localctx = JavaParserLabeled.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 812
            self.match(JavaParserLabeled.LPAREN)
            self.state = 813
            self.match(JavaParserLabeled.RPAREN)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.DEFAULT:
                self.state = 814
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationConstantRest" ):
                return visitor.visitAnnotationConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationConstantRest(self):

        localctx = JavaParserLabeled.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParserLabeled.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParserLabeled.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = JavaParserLabeled.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(JavaParserLabeled.DEFAULT)
            self.state = 820
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JavaParserLabeled.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(JavaParserLabeled.LBRACE)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.ASSERT) | (1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BREAK) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.CONTINUE) | (1 << JavaParserLabeled.DO) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.FOR) | (1 << JavaParserLabeled.IF) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.RETURN) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.SWITCH) | (1 << JavaParserLabeled.SYNCHRONIZED) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.THROW) | (1 << JavaParserLabeled.TRY) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.WHILE) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN) | (1 << JavaParserLabeled.LBRACE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.LT - 67)) | (1 << (JavaParserLabeled.BANG - 67)) | (1 << (JavaParserLabeled.TILDE - 67)) | (1 << (JavaParserLabeled.INC - 67)) | (1 << (JavaParserLabeled.DEC - 67)) | (1 << (JavaParserLabeled.ADD - 67)) | (1 << (JavaParserLabeled.SUB - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0):
                self.state = 823
                self.blockStatement()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self.match(JavaParserLabeled.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_blockStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockStatement1Context(BlockStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.BlockStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(JavaParserLabeled.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement1" ):
                listener.enterBlockStatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement1" ):
                listener.exitBlockStatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement1" ):
                return visitor.visitBlockStatement1(self)
            else:
                return visitor.visitChildren(self)


    class BlockStatement0Context(BlockStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.BlockStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.LocalVariableDeclarationContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement0" ):
                listener.enterBlockStatement0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement0" ):
                listener.exitBlockStatement0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement0" ):
                return visitor.visitBlockStatement0(self)
            else:
                return visitor.visitChildren(self)


    class BlockStatement2Context(BlockStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.BlockStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.LocalTypeDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement2" ):
                listener.enterBlockStatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement2" ):
                listener.exitBlockStatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement2" ):
                return visitor.visitBlockStatement2(self)
            else:
                return visitor.visitChildren(self)



    def blockStatement(self):

        localctx = JavaParserLabeled.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_blockStatement)
        try:
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.BlockStatement0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.localVariableDeclaration()
                self.state = 832
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.BlockStatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.statement()
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.BlockStatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.localTypeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JavaParserLabeled.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 838
                    self.variableModifier() 
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 844
            self.typeType()
            self.state = 845
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.InterfaceDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ClassOrInterfaceModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalTypeDeclaration" ):
                return visitor.visitLocalTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localTypeDeclaration(self):

        localctx = JavaParserLabeled.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_localTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.ABSTRACT, JavaParserLabeled.CLASS, JavaParserLabeled.FINAL, JavaParserLabeled.INTERFACE, JavaParserLabeled.PRIVATE, JavaParserLabeled.PROTECTED, JavaParserLabeled.PUBLIC, JavaParserLabeled.STATIC, JavaParserLabeled.STRICTFP, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP))) != 0) or _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                    self.state = 847
                    self.classOrInterfaceModifier()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 855
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParserLabeled.CLASS]:
                    self.state = 853
                    self.classDeclaration()
                    pass
                elif token in [JavaParserLabeled.INTERFACE]:
                    self.state = 854
                    self.interfaceDeclaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [JavaParserLabeled.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.match(JavaParserLabeled.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Statement14Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement14" ):
                listener.enterStatement14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement14" ):
                listener.exitStatement14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement14" ):
                return visitor.visitStatement14(self)
            else:
                return visitor.visitChildren(self)


    class Statement15Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.statementExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement15" ):
                listener.enterStatement15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement15" ):
                listener.exitStatement15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement15" ):
                return visitor.visitStatement15(self)
            else:
                return visitor.visitChildren(self)


    class Statement12Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(JavaParserLabeled.BREAK, 0)
        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)
        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement12" ):
                listener.enterStatement12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement12" ):
                listener.exitStatement12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement12" ):
                return visitor.visitStatement12(self)
            else:
                return visitor.visitChildren(self)


    class Statement13Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(JavaParserLabeled.CONTINUE, 0)
        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)
        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement13" ):
                listener.enterStatement13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement13" ):
                listener.exitStatement13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement13" ):
                return visitor.visitStatement13(self)
            else:
                return visitor.visitChildren(self)


    class Statement9Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParserLabeled.SYNCHRONIZED, 0)
        def parExpression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ParExpressionContext,0)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement9" ):
                listener.enterStatement9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement9" ):
                listener.exitStatement9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement9" ):
                return visitor.visitStatement9(self)
            else:
                return visitor.visitChildren(self)


    class Statement7Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(JavaParserLabeled.TRY, 0)
        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParserLabeled.ResourceSpecificationContext,0)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.CatchClauseContext,i)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParserLabeled.FinallyBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement7" ):
                listener.enterStatement7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement7" ):
                listener.exitStatement7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement7" ):
                return visitor.visitStatement7(self)
            else:
                return visitor.visitChildren(self)


    class Statement16Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.identifierLabel = None # Token
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(JavaParserLabeled.COLON, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaParserLabeled.StatementContext,0)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement16" ):
                listener.enterStatement16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement16" ):
                listener.exitStatement16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement16" ):
                return visitor.visitStatement16(self)
            else:
                return visitor.visitChildren(self)


    class Statement8Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWITCH(self):
            return self.getToken(JavaParserLabeled.SWITCH, 0)
        def parExpression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ParExpressionContext,0)

        def LBRACE(self):
            return self.getToken(JavaParserLabeled.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(JavaParserLabeled.RBRACE, 0)
        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.SwitchBlockStatementGroupContext,i)

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.SwitchLabelContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement8" ):
                listener.enterStatement8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement8" ):
                listener.exitStatement8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement8" ):
                return visitor.visitStatement8(self)
            else:
                return visitor.visitChildren(self)


    class Statement5Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(JavaParserLabeled.DO, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaParserLabeled.StatementContext,0)

        def WHILE(self):
            return self.getToken(JavaParserLabeled.WHILE, 0)
        def parExpression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ParExpressionContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement5" ):
                listener.enterStatement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement5" ):
                listener.exitStatement5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement5" ):
                return visitor.visitStatement5(self)
            else:
                return visitor.visitChildren(self)


    class Statement6Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(JavaParserLabeled.TRY, 0)
        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParserLabeled.FinallyBlockContext,0)

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.CatchClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement6" ):
                listener.enterStatement6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement6" ):
                listener.exitStatement6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement6" ):
                return visitor.visitStatement6(self)
            else:
                return visitor.visitChildren(self)


    class Statement3Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(JavaParserLabeled.FOR, 0)
        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def forControl(self):
            return self.getTypedRuleContext(JavaParserLabeled.ForControlContext,0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def statement(self):
            return self.getTypedRuleContext(JavaParserLabeled.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement3" ):
                listener.enterStatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement3" ):
                listener.exitStatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement3" ):
                return visitor.visitStatement3(self)
            else:
                return visitor.visitChildren(self)


    class Statement4Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(JavaParserLabeled.WHILE, 0)
        def parExpression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ParExpressionContext,0)

        def statement(self):
            return self.getTypedRuleContext(JavaParserLabeled.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement4" ):
                listener.enterStatement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement4" ):
                listener.exitStatement4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement4" ):
                return visitor.visitStatement4(self)
            else:
                return visitor.visitChildren(self)


    class Statement1Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(JavaParserLabeled.ASSERT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)
        def COLON(self):
            return self.getToken(JavaParserLabeled.COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement1" ):
                listener.enterStatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement1" ):
                listener.exitStatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement1" ):
                return visitor.visitStatement1(self)
            else:
                return visitor.visitChildren(self)


    class Statement2Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(JavaParserLabeled.IF, 0)
        def parExpression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ParExpressionContext,0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.StatementContext,i)

        def ELSE(self):
            return self.getToken(JavaParserLabeled.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement2" ):
                listener.enterStatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement2" ):
                listener.exitStatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement2" ):
                return visitor.visitStatement2(self)
            else:
                return visitor.visitChildren(self)


    class Statement0Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.blockLabel = None # BlockContext
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement0" ):
                listener.enterStatement0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement0" ):
                listener.exitStatement0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement0" ):
                return visitor.visitStatement0(self)
            else:
                return visitor.visitChildren(self)


    class Statement10Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(JavaParserLabeled.RETURN, 0)
        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement10" ):
                listener.enterStatement10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement10" ):
                listener.exitStatement10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement10" ):
                return visitor.visitStatement10(self)
            else:
                return visitor.visitChildren(self)


    class Statement11Context(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(JavaParserLabeled.THROW, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement11" ):
                listener.enterStatement11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement11" ):
                listener.exitStatement11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement11" ):
                return visitor.visitStatement11(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = JavaParserLabeled.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.Statement0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.Statement1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(JavaParserLabeled.ASSERT)
                self.state = 862
                self.expression(0)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.COLON:
                    self.state = 863
                    self.match(JavaParserLabeled.COLON)
                    self.state = 864
                    self.expression(0)


                self.state = 867
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.Statement2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 869
                self.match(JavaParserLabeled.IF)
                self.state = 870
                self.parExpression()
                self.state = 871
                self.statement()
                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 872
                    self.match(JavaParserLabeled.ELSE)
                    self.state = 873
                    self.statement()


                pass

            elif la_ == 4:
                localctx = JavaParserLabeled.Statement3Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 876
                self.match(JavaParserLabeled.FOR)
                self.state = 877
                self.match(JavaParserLabeled.LPAREN)
                self.state = 878
                self.forControl()
                self.state = 879
                self.match(JavaParserLabeled.RPAREN)
                self.state = 880
                self.statement()
                pass

            elif la_ == 5:
                localctx = JavaParserLabeled.Statement4Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 882
                self.match(JavaParserLabeled.WHILE)
                self.state = 883
                self.parExpression()
                self.state = 884
                self.statement()
                pass

            elif la_ == 6:
                localctx = JavaParserLabeled.Statement5Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 886
                self.match(JavaParserLabeled.DO)
                self.state = 887
                self.statement()
                self.state = 888
                self.match(JavaParserLabeled.WHILE)
                self.state = 889
                self.parExpression()
                self.state = 890
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 7:
                localctx = JavaParserLabeled.Statement6Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 892
                self.match(JavaParserLabeled.TRY)
                self.state = 893
                self.block()
                self.state = 903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParserLabeled.CATCH]:
                    self.state = 895 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 894
                        self.catchClause()
                        self.state = 897 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==JavaParserLabeled.CATCH):
                            break

                    self.state = 900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParserLabeled.FINALLY:
                        self.state = 899
                        self.finallyBlock()


                    pass
                elif token in [JavaParserLabeled.FINALLY]:
                    self.state = 902
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                localctx = JavaParserLabeled.Statement7Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 905
                self.match(JavaParserLabeled.TRY)
                self.state = 906
                self.resourceSpecification()
                self.state = 907
                self.block()
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParserLabeled.CATCH:
                    self.state = 908
                    self.catchClause()
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.FINALLY:
                    self.state = 914
                    self.finallyBlock()


                pass

            elif la_ == 9:
                localctx = JavaParserLabeled.Statement8Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 917
                self.match(JavaParserLabeled.SWITCH)
                self.state = 918
                self.parExpression()
                self.state = 919
                self.match(JavaParserLabeled.LBRACE)
                self.state = 923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 920
                        self.switchBlockStatementGroup() 
                    self.state = 925
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParserLabeled.CASE or _la==JavaParserLabeled.DEFAULT:
                    self.state = 926
                    self.switchLabel()
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 932
                self.match(JavaParserLabeled.RBRACE)
                pass

            elif la_ == 10:
                localctx = JavaParserLabeled.Statement9Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 934
                self.match(JavaParserLabeled.SYNCHRONIZED)
                self.state = 935
                self.parExpression()
                self.state = 936
                self.block()
                pass

            elif la_ == 11:
                localctx = JavaParserLabeled.Statement10Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 938
                self.match(JavaParserLabeled.RETURN)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 939
                    self.expression(0)


                self.state = 942
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 12:
                localctx = JavaParserLabeled.Statement11Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 943
                self.match(JavaParserLabeled.THROW)
                self.state = 944
                self.expression(0)
                self.state = 945
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 13:
                localctx = JavaParserLabeled.Statement12Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 947
                self.match(JavaParserLabeled.BREAK)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.IDENTIFIER:
                    self.state = 948
                    self.match(JavaParserLabeled.IDENTIFIER)


                self.state = 951
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 14:
                localctx = JavaParserLabeled.Statement13Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 952
                self.match(JavaParserLabeled.CONTINUE)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.IDENTIFIER:
                    self.state = 953
                    self.match(JavaParserLabeled.IDENTIFIER)


                self.state = 956
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 15:
                localctx = JavaParserLabeled.Statement14Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 957
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 16:
                localctx = JavaParserLabeled.Statement15Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 958
                localctx.statementExpression = self.expression(0)
                self.state = 959
                self.match(JavaParserLabeled.SEMI)
                pass

            elif la_ == 17:
                localctx = JavaParserLabeled.Statement16Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 961
                localctx.identifierLabel = self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 962
                self.match(JavaParserLabeled.COLON)
                self.state = 963
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParserLabeled.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParserLabeled.CatchTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = JavaParserLabeled.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(JavaParserLabeled.CATCH)
            self.state = 967
            self.match(JavaParserLabeled.LPAREN)
            self.state = 971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 968
                    self.variableModifier() 
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 974
            self.catchType()
            self.state = 975
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 976
            self.match(JavaParserLabeled.RPAREN)
            self.state = 977
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.BITOR)
            else:
                return self.getToken(JavaParserLabeled.BITOR, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchType" ):
                return visitor.visitCatchType(self)
            else:
                return visitor.visitChildren(self)




    def catchType(self):

        localctx = JavaParserLabeled.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.qualifiedName()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.BITOR:
                self.state = 980
                self.match(JavaParserLabeled.BITOR)
                self.state = 981
                self.qualifiedName()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParserLabeled.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = JavaParserLabeled.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(JavaParserLabeled.FINALLY)
            self.state = 988
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParserLabeled.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParserLabeled.SEMI, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceSpecification" ):
                return visitor.visitResourceSpecification(self)
            else:
                return visitor.visitChildren(self)




    def resourceSpecification(self):

        localctx = JavaParserLabeled.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(JavaParserLabeled.LPAREN)
            self.state = 991
            self.resources()
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.SEMI:
                self.state = 992
                self.match(JavaParserLabeled.SEMI)


            self.state = 995
            self.match(JavaParserLabeled.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.SEMI)
            else:
                return self.getToken(JavaParserLabeled.SEMI, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResources" ):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)




    def resources(self):

        localctx = JavaParserLabeled.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.resource()
            self.state = 1002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 998
                    self.match(JavaParserLabeled.SEMI)
                    self.state = 999
                    self.resource() 
                self.state = 1004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParserLabeled.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = JavaParserLabeled.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1005
                    self.variableModifier() 
                self.state = 1010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 1011
            self.classOrInterfaceType()
            self.state = 1012
            self.variableDeclaratorId()
            self.state = 1013
            self.match(JavaParserLabeled.ASSIGN)
            self.state = 1014
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatementGroup" ):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParserLabeled.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1016
                self.switchLabel()
                self.state = 1019 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaParserLabeled.CASE or _la==JavaParserLabeled.DEFAULT):
                    break

            self.state = 1022 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1021
                self.blockStatement()
                self.state = 1024 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.ABSTRACT) | (1 << JavaParserLabeled.ASSERT) | (1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BREAK) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.CLASS) | (1 << JavaParserLabeled.CONTINUE) | (1 << JavaParserLabeled.DO) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.FOR) | (1 << JavaParserLabeled.IF) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.INTERFACE) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.PRIVATE) | (1 << JavaParserLabeled.PROTECTED) | (1 << JavaParserLabeled.PUBLIC) | (1 << JavaParserLabeled.RETURN) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.STATIC) | (1 << JavaParserLabeled.STRICTFP) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.SWITCH) | (1 << JavaParserLabeled.SYNCHRONIZED) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.THROW) | (1 << JavaParserLabeled.TRY) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.WHILE) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN) | (1 << JavaParserLabeled.LBRACE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParserLabeled.SEMI - 67)) | (1 << (JavaParserLabeled.LT - 67)) | (1 << (JavaParserLabeled.BANG - 67)) | (1 << (JavaParserLabeled.TILDE - 67)) | (1 << (JavaParserLabeled.INC - 67)) | (1 << (JavaParserLabeled.DEC - 67)) | (1 << (JavaParserLabeled.ADD - 67)) | (1 << (JavaParserLabeled.SUB - 67)) | (1 << (JavaParserLabeled.AT - 67)) | (1 << (JavaParserLabeled.IDENTIFIER - 67)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token

        def CASE(self):
            return self.getToken(JavaParserLabeled.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParserLabeled.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def DEFAULT(self):
            return self.getToken(JavaParserLabeled.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JavaParserLabeled.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_switchLabel)
        try:
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1026
                self.match(JavaParserLabeled.CASE)
                self.state = 1029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1027
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1028
                    localctx.enumConstantName = self.match(JavaParserLabeled.IDENTIFIER)
                    pass


                self.state = 1031
                self.match(JavaParserLabeled.COLON)
                pass
            elif token in [JavaParserLabeled.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(JavaParserLabeled.DEFAULT)
                self.state = 1033
                self.match(JavaParserLabeled.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_forControl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForControl0Context(ForControlContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ForControlContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParserLabeled.EnhancedForControlContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl0" ):
                listener.enterForControl0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl0" ):
                listener.exitForControl0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl0" ):
                return visitor.visitForControl0(self)
            else:
                return visitor.visitChildren(self)


    class ForControl1Context(ForControlContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ForControlContext
            super().__init__(parser)
            self.forUpdate = None # ExpressionListContext
            self.copyFrom(ctx)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.SEMI)
            else:
                return self.getToken(JavaParserLabeled.SEMI, i)
        def forInit(self):
            return self.getTypedRuleContext(JavaParserLabeled.ForInitContext,0)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl1" ):
                listener.enterForControl1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl1" ):
                listener.exitForControl1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl1" ):
                return visitor.visitForControl1(self)
            else:
                return visitor.visitChildren(self)



    def forControl(self):

        localctx = JavaParserLabeled.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.ForControl0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.enhancedForControl()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.ForControl1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 1037
                    self.forInit()


                self.state = 1040
                self.match(JavaParserLabeled.SEMI)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 1041
                    self.expression(0)


                self.state = 1044
                self.match(JavaParserLabeled.SEMI)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 1045
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_forInit

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInit1Context(ForInitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ForInitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit1" ):
                listener.enterForInit1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit1" ):
                listener.exitForInit1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit1" ):
                return visitor.visitForInit1(self)
            else:
                return visitor.visitChildren(self)


    class ForInit0Context(ForInitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ForInitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParserLabeled.LocalVariableDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit0" ):
                listener.enterForInit0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit0" ):
                listener.exitForInit0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit0" ):
                return visitor.visitForInit0(self)
            else:
                return visitor.visitChildren(self)



    def forInit(self):

        localctx = JavaParserLabeled.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forInit)
        try:
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.ForInit0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.ForInit1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParserLabeled.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParserLabeled.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JavaParserLabeled.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1054
                    self.variableModifier() 
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1060
            self.typeType()
            self.state = 1061
            self.variableDeclaratorId()
            self.state = 1062
            self.match(JavaParserLabeled.COLON)
            self.state = 1063
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParExpression" ):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)




    def parExpression(self):

        localctx = JavaParserLabeled.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(JavaParserLabeled.LPAREN)
            self.state = 1066
            self.expression(0)
            self.state = 1067
            self.match(JavaParserLabeled.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JavaParserLabeled.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.expression(0)
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 1070
                self.match(JavaParserLabeled.COMMA)
                self.state = 1071
                self.expression(0)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_methodCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MethodCall0Context(MethodCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MethodCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)
        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall0" ):
                listener.enterMethodCall0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall0" ):
                listener.exitMethodCall0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall0" ):
                return visitor.visitMethodCall0(self)
            else:
                return visitor.visitChildren(self)


    class MethodCall1Context(MethodCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MethodCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(JavaParserLabeled.THIS, 0)
        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall1" ):
                listener.enterMethodCall1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall1" ):
                listener.exitMethodCall1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall1" ):
                return visitor.visitMethodCall1(self)
            else:
                return visitor.visitChildren(self)


    class MethodCall2Context(MethodCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.MethodCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(JavaParserLabeled.SUPER, 0)
        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall2" ):
                listener.enterMethodCall2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall2" ):
                listener.exitMethodCall2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall2" ):
                return visitor.visitMethodCall2(self)
            else:
                return visitor.visitChildren(self)



    def methodCall(self):

        localctx = JavaParserLabeled.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_methodCall)
        self._la = 0 # Token type
        try:
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.IDENTIFIER]:
                localctx = JavaParserLabeled.MethodCall0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 1078
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 1079
                    self.expressionList()


                self.state = 1082
                self.match(JavaParserLabeled.RPAREN)
                pass
            elif token in [JavaParserLabeled.THIS]:
                localctx = JavaParserLabeled.MethodCall1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.match(JavaParserLabeled.THIS)
                self.state = 1084
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 1085
                    self.expressionList()


                self.state = 1088
                self.match(JavaParserLabeled.RPAREN)
                pass
            elif token in [JavaParserLabeled.SUPER]:
                localctx = JavaParserLabeled.MethodCall2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self.match(JavaParserLabeled.SUPER)
                self.state = 1090
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                    self.state = 1091
                    self.expressionList()


                self.state = 1094
                self.match(JavaParserLabeled.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Expression8Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(JavaParserLabeled.TILDE, 0)
        def BANG(self):
            return self.getToken(JavaParserLabeled.BANG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression8" ):
                listener.enterExpression8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression8" ):
                listener.exitExpression8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression8" ):
                return visitor.visitExpression8(self)
            else:
                return visitor.visitChildren(self)


    class Expression10Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def ADD(self):
            return self.getToken(JavaParserLabeled.ADD, 0)
        def SUB(self):
            return self.getToken(JavaParserLabeled.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression10" ):
                listener.enterExpression10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression10" ):
                listener.exitExpression10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression10" ):
                return visitor.visitExpression10(self)
            else:
                return visitor.visitChildren(self)


    class Expression9Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def MUL(self):
            return self.getToken(JavaParserLabeled.MUL, 0)
        def DIV(self):
            return self.getToken(JavaParserLabeled.DIV, 0)
        def MOD(self):
            return self.getToken(JavaParserLabeled.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression9" ):
                listener.enterExpression9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression9" ):
                listener.exitExpression9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression9" ):
                return visitor.visitExpression9(self)
            else:
                return visitor.visitChildren(self)


    class Expression12Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def LE(self):
            return self.getToken(JavaParserLabeled.LE, 0)
        def GE(self):
            return self.getToken(JavaParserLabeled.GE, 0)
        def GT(self):
            return self.getToken(JavaParserLabeled.GT, 0)
        def LT(self):
            return self.getToken(JavaParserLabeled.LT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression12" ):
                listener.enterExpression12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression12" ):
                listener.exitExpression12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression12" ):
                return visitor.visitExpression12(self)
            else:
                return visitor.visitChildren(self)


    class Expression11Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LT)
            else:
                return self.getToken(JavaParserLabeled.LT, i)
        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.GT)
            else:
                return self.getToken(JavaParserLabeled.GT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression11" ):
                listener.enterExpression11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression11" ):
                listener.exitExpression11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression11" ):
                return visitor.visitExpression11(self)
            else:
                return visitor.visitChildren(self)


    class Expression14Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def EQUAL(self):
            return self.getToken(JavaParserLabeled.EQUAL, 0)
        def NOTEQUAL(self):
            return self.getToken(JavaParserLabeled.NOTEQUAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression14" ):
                listener.enterExpression14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression14" ):
                listener.exitExpression14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression14" ):
                return visitor.visitExpression14(self)
            else:
                return visitor.visitChildren(self)


    class Expression13Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)

        def INSTANCEOF(self):
            return self.getToken(JavaParserLabeled.INSTANCEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression13" ):
                listener.enterExpression13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression13" ):
                listener.exitExpression13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression13" ):
                return visitor.visitExpression13(self)
            else:
                return visitor.visitChildren(self)


    class Expression16Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def CARET(self):
            return self.getToken(JavaParserLabeled.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression16" ):
                listener.enterExpression16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression16" ):
                listener.exitExpression16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression16" ):
                return visitor.visitExpression16(self)
            else:
                return visitor.visitChildren(self)


    class Expression15Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def BITAND(self):
            return self.getToken(JavaParserLabeled.BITAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression15" ):
                listener.enterExpression15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression15" ):
                listener.exitExpression15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression15" ):
                return visitor.visitExpression15(self)
            else:
                return visitor.visitChildren(self)


    class Expression18Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def AND(self):
            return self.getToken(JavaParserLabeled.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression18" ):
                listener.enterExpression18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression18" ):
                listener.exitExpression18(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression18" ):
                return visitor.visitExpression18(self)
            else:
                return visitor.visitChildren(self)


    class Expression17Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def BITOR(self):
            return self.getToken(JavaParserLabeled.BITOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression17" ):
                listener.enterExpression17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression17" ):
                listener.exitExpression17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression17" ):
                return visitor.visitExpression17(self)
            else:
                return visitor.visitChildren(self)


    class Expression19Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def OR(self):
            return self.getToken(JavaParserLabeled.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression19" ):
                listener.enterExpression19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression19" ):
                listener.exitExpression19(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression19" ):
                return visitor.visitExpression19(self)
            else:
                return visitor.visitChildren(self)


    class Expression6Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.postfix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def INC(self):
            return self.getToken(JavaParserLabeled.INC, 0)
        def DEC(self):
            return self.getToken(JavaParserLabeled.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression6" ):
                listener.enterExpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression6" ):
                listener.exitExpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression6" ):
                return visitor.visitExpression6(self)
            else:
                return visitor.visitChildren(self)


    class Expression7Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def ADD(self):
            return self.getToken(JavaParserLabeled.ADD, 0)
        def SUB(self):
            return self.getToken(JavaParserLabeled.SUB, 0)
        def INC(self):
            return self.getToken(JavaParserLabeled.INC, 0)
        def DEC(self):
            return self.getToken(JavaParserLabeled.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression7" ):
                listener.enterExpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression7" ):
                listener.exitExpression7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression7" ):
                return visitor.visitExpression7(self)
            else:
                return visitor.visitChildren(self)


    class Expression4Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(JavaParserLabeled.NEW, 0)
        def creator(self):
            return self.getTypedRuleContext(JavaParserLabeled.CreatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression4" ):
                listener.enterExpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression4" ):
                listener.exitExpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression4" ):
                return visitor.visitExpression4(self)
            else:
                return visitor.visitChildren(self)


    class Expression5Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression5" ):
                listener.enterExpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression5" ):
                listener.exitExpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression5" ):
                return visitor.visitExpression5(self)
            else:
                return visitor.visitChildren(self)


    class Expression2Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(JavaParserLabeled.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(JavaParserLabeled.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression2" ):
                listener.enterExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression2" ):
                listener.exitExpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression2" ):
                return visitor.visitExpression2(self)
            else:
                return visitor.visitChildren(self)


    class Expression3Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParserLabeled.MethodCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression3" ):
                listener.enterExpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression3" ):
                listener.exitExpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression3" ):
                return visitor.visitExpression3(self)
            else:
                return visitor.visitChildren(self)


    class Expression0Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(JavaParserLabeled.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression0" ):
                listener.enterExpression0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression0" ):
                listener.exitExpression0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression0" ):
                return visitor.visitExpression0(self)
            else:
                return visitor.visitChildren(self)


    class Expression1Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def DOT(self):
            return self.getToken(JavaParserLabeled.DOT, 0)
        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)
        def methodCall(self):
            return self.getTypedRuleContext(JavaParserLabeled.MethodCallContext,0)

        def THIS(self):
            return self.getToken(JavaParserLabeled.THIS, 0)
        def NEW(self):
            return self.getToken(JavaParserLabeled.NEW, 0)
        def innerCreator(self):
            return self.getTypedRuleContext(JavaParserLabeled.InnerCreatorContext,0)

        def SUPER(self):
            return self.getToken(JavaParserLabeled.SUPER, 0)
        def superSuffix(self):
            return self.getTypedRuleContext(JavaParserLabeled.SuperSuffixContext,0)

        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExplicitGenericInvocationContext,0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.NonWildcardTypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression1" ):
                listener.enterExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression1" ):
                listener.exitExpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression1" ):
                return visitor.visitExpression1(self)
            else:
                return visitor.visitChildren(self)


    class Expression21Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def ASSIGN(self):
            return self.getToken(JavaParserLabeled.ASSIGN, 0)
        def ADD_ASSIGN(self):
            return self.getToken(JavaParserLabeled.ADD_ASSIGN, 0)
        def SUB_ASSIGN(self):
            return self.getToken(JavaParserLabeled.SUB_ASSIGN, 0)
        def MUL_ASSIGN(self):
            return self.getToken(JavaParserLabeled.MUL_ASSIGN, 0)
        def DIV_ASSIGN(self):
            return self.getToken(JavaParserLabeled.DIV_ASSIGN, 0)
        def AND_ASSIGN(self):
            return self.getToken(JavaParserLabeled.AND_ASSIGN, 0)
        def OR_ASSIGN(self):
            return self.getToken(JavaParserLabeled.OR_ASSIGN, 0)
        def XOR_ASSIGN(self):
            return self.getToken(JavaParserLabeled.XOR_ASSIGN, 0)
        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParserLabeled.RSHIFT_ASSIGN, 0)
        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParserLabeled.URSHIFT_ASSIGN, 0)
        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParserLabeled.LSHIFT_ASSIGN, 0)
        def MOD_ASSIGN(self):
            return self.getToken(JavaParserLabeled.MOD_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression21" ):
                listener.enterExpression21(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression21" ):
                listener.exitExpression21(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression21" ):
                return visitor.visitExpression21(self)
            else:
                return visitor.visitChildren(self)


    class Expression20Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)

        def COLON(self):
            return self.getToken(JavaParserLabeled.COLON, 0)
        def QUESTION(self):
            return self.getToken(JavaParserLabeled.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression20" ):
                listener.enterExpression20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression20" ):
                listener.exitExpression20(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression20" ):
                return visitor.visitExpression20(self)
            else:
                return visitor.visitChildren(self)


    class Expression23Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def COLONCOLON(self):
            return self.getToken(JavaParserLabeled.COLONCOLON, 0)
        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)
        def typeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression23" ):
                listener.enterExpression23(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression23" ):
                listener.exitExpression23(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression23" ):
                return visitor.visitExpression23(self)
            else:
                return visitor.visitChildren(self)


    class Expression22Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParserLabeled.LambdaExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression22" ):
                listener.enterExpression22(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression22" ):
                listener.exitExpression22(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression22" ):
                return visitor.visitExpression22(self)
            else:
                return visitor.visitChildren(self)


    class Expression25Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classType(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassTypeContext,0)

        def COLONCOLON(self):
            return self.getToken(JavaParserLabeled.COLONCOLON, 0)
        def NEW(self):
            return self.getToken(JavaParserLabeled.NEW, 0)
        def typeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression25" ):
                listener.enterExpression25(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression25" ):
                listener.exitExpression25(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression25" ):
                return visitor.visitExpression25(self)
            else:
                return visitor.visitChildren(self)


    class Expression24Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,0)

        def COLONCOLON(self):
            return self.getToken(JavaParserLabeled.COLONCOLON, 0)
        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)
        def NEW(self):
            return self.getToken(JavaParserLabeled.NEW, 0)
        def typeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression24" ):
                listener.enterExpression24(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression24" ):
                listener.exitExpression24(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression24" ):
                return visitor.visitExpression24(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParserLabeled.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.Expression0Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1098
                self.primary()
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.Expression3Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1099
                self.methodCall()
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.Expression4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1100
                self.match(JavaParserLabeled.NEW)
                self.state = 1101
                self.creator()
                pass

            elif la_ == 4:
                localctx = JavaParserLabeled.Expression5Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1102
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1103
                        self.annotation() 
                    self.state = 1108
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 1109
                self.typeType()
                self.state = 1110
                self.match(JavaParserLabeled.RPAREN)
                self.state = 1111
                self.expression(21)
                pass

            elif la_ == 5:
                localctx = JavaParserLabeled.Expression7Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1113
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (JavaParserLabeled.INC - 83)) | (1 << (JavaParserLabeled.DEC - 83)) | (1 << (JavaParserLabeled.ADD - 83)) | (1 << (JavaParserLabeled.SUB - 83)))) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1114
                self.expression(19)
                pass

            elif la_ == 6:
                localctx = JavaParserLabeled.Expression8Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1115
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==JavaParserLabeled.BANG or _la==JavaParserLabeled.TILDE):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1116
                self.expression(18)
                pass

            elif la_ == 7:
                localctx = JavaParserLabeled.Expression22Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1117
                self.lambdaExpression()
                pass

            elif la_ == 8:
                localctx = JavaParserLabeled.Expression24Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1118
                self.typeType()
                self.state = 1119
                self.match(JavaParserLabeled.COLONCOLON)
                self.state = 1125
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParserLabeled.LT, JavaParserLabeled.IDENTIFIER]:
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParserLabeled.LT:
                        self.state = 1120
                        self.typeArguments()


                    self.state = 1123
                    self.match(JavaParserLabeled.IDENTIFIER)
                    pass
                elif token in [JavaParserLabeled.NEW]:
                    self.state = 1124
                    self.match(JavaParserLabeled.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = JavaParserLabeled.Expression25Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1127
                self.classType()
                self.state = 1128
                self.match(JavaParserLabeled.COLONCOLON)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.LT:
                    self.state = 1129
                    self.typeArguments()


                self.state = 1132
                self.match(JavaParserLabeled.NEW)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1214
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        localctx = JavaParserLabeled.Expression9Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1136
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1137
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (JavaParserLabeled.MUL - 87)) | (1 << (JavaParserLabeled.DIV - 87)) | (1 << (JavaParserLabeled.MOD - 87)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1138
                        self.expression(18)
                        pass

                    elif la_ == 2:
                        localctx = JavaParserLabeled.Expression10Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1139
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1140
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParserLabeled.ADD or _la==JavaParserLabeled.SUB):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1141
                        self.expression(17)
                        pass

                    elif la_ == 3:
                        localctx = JavaParserLabeled.Expression11Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1142
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1150
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                        if la_ == 1:
                            self.state = 1143
                            self.match(JavaParserLabeled.LT)
                            self.state = 1144
                            self.match(JavaParserLabeled.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1145
                            self.match(JavaParserLabeled.GT)
                            self.state = 1146
                            self.match(JavaParserLabeled.GT)
                            self.state = 1147
                            self.match(JavaParserLabeled.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1148
                            self.match(JavaParserLabeled.GT)
                            self.state = 1149
                            self.match(JavaParserLabeled.GT)
                            pass


                        self.state = 1152
                        self.expression(16)
                        pass

                    elif la_ == 4:
                        localctx = JavaParserLabeled.Expression12Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1153
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1154
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (JavaParserLabeled.GT - 71)) | (1 << (JavaParserLabeled.LT - 71)) | (1 << (JavaParserLabeled.LE - 71)) | (1 << (JavaParserLabeled.GE - 71)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1155
                        self.expression(15)
                        pass

                    elif la_ == 5:
                        localctx = JavaParserLabeled.Expression14Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1156
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1157
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParserLabeled.EQUAL or _la==JavaParserLabeled.NOTEQUAL):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1158
                        self.expression(13)
                        pass

                    elif la_ == 6:
                        localctx = JavaParserLabeled.Expression15Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1159
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1160
                        localctx.bop = self.match(JavaParserLabeled.BITAND)
                        self.state = 1161
                        self.expression(12)
                        pass

                    elif la_ == 7:
                        localctx = JavaParserLabeled.Expression16Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1162
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1163
                        localctx.bop = self.match(JavaParserLabeled.CARET)
                        self.state = 1164
                        self.expression(11)
                        pass

                    elif la_ == 8:
                        localctx = JavaParserLabeled.Expression17Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1165
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1166
                        localctx.bop = self.match(JavaParserLabeled.BITOR)
                        self.state = 1167
                        self.expression(10)
                        pass

                    elif la_ == 9:
                        localctx = JavaParserLabeled.Expression18Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1168
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1169
                        localctx.bop = self.match(JavaParserLabeled.AND)
                        self.state = 1170
                        self.expression(9)
                        pass

                    elif la_ == 10:
                        localctx = JavaParserLabeled.Expression19Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1171
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1172
                        localctx.bop = self.match(JavaParserLabeled.OR)
                        self.state = 1173
                        self.expression(8)
                        pass

                    elif la_ == 11:
                        localctx = JavaParserLabeled.Expression20Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1174
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1175
                        localctx.bop = self.match(JavaParserLabeled.QUESTION)
                        self.state = 1176
                        self.expression(0)
                        self.state = 1177
                        self.match(JavaParserLabeled.COLON)
                        self.state = 1178
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = JavaParserLabeled.Expression21Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1180
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1181
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (JavaParserLabeled.ASSIGN - 70)) | (1 << (JavaParserLabeled.ADD_ASSIGN - 70)) | (1 << (JavaParserLabeled.SUB_ASSIGN - 70)) | (1 << (JavaParserLabeled.MUL_ASSIGN - 70)) | (1 << (JavaParserLabeled.DIV_ASSIGN - 70)) | (1 << (JavaParserLabeled.AND_ASSIGN - 70)) | (1 << (JavaParserLabeled.OR_ASSIGN - 70)) | (1 << (JavaParserLabeled.XOR_ASSIGN - 70)) | (1 << (JavaParserLabeled.MOD_ASSIGN - 70)) | (1 << (JavaParserLabeled.LSHIFT_ASSIGN - 70)) | (1 << (JavaParserLabeled.RSHIFT_ASSIGN - 70)) | (1 << (JavaParserLabeled.URSHIFT_ASSIGN - 70)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1182
                        self.expression(5)
                        pass

                    elif la_ == 13:
                        localctx = JavaParserLabeled.Expression1Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1183
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1184
                        localctx.bop = self.match(JavaParserLabeled.DOT)
                        self.state = 1196
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                        if la_ == 1:
                            self.state = 1185
                            self.match(JavaParserLabeled.IDENTIFIER)
                            pass

                        elif la_ == 2:
                            self.state = 1186
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1187
                            self.match(JavaParserLabeled.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1188
                            self.match(JavaParserLabeled.NEW)
                            self.state = 1190
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==JavaParserLabeled.LT:
                                self.state = 1189
                                self.nonWildcardTypeArguments()


                            self.state = 1192
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1193
                            self.match(JavaParserLabeled.SUPER)
                            self.state = 1194
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1195
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 14:
                        localctx = JavaParserLabeled.Expression2Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1198
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1199
                        self.match(JavaParserLabeled.LBRACK)
                        self.state = 1200
                        self.expression(0)
                        self.state = 1201
                        self.match(JavaParserLabeled.RBRACK)
                        pass

                    elif la_ == 15:
                        localctx = JavaParserLabeled.Expression6Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1203
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1204
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParserLabeled.INC or _la==JavaParserLabeled.DEC):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 16:
                        localctx = JavaParserLabeled.Expression13Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1205
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1206
                        localctx.bop = self.match(JavaParserLabeled.INSTANCEOF)
                        self.state = 1207
                        self.typeType()
                        pass

                    elif la_ == 17:
                        localctx = JavaParserLabeled.Expression23Context(self, JavaParserLabeled.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1208
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1209
                        self.match(JavaParserLabeled.COLONCOLON)
                        self.state = 1211
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==JavaParserLabeled.LT:
                            self.state = 1210
                            self.typeArguments()


                        self.state = 1213
                        self.match(JavaParserLabeled.IDENTIFIER)
                        pass

             
                self.state = 1218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParserLabeled.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParserLabeled.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JavaParserLabeled.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.lambdaParameters()
            self.state = 1220
            self.match(JavaParserLabeled.ARROW)
            self.state = 1221
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_lambdaParameters

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LambdaParameters0Context(LambdaParametersContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LambdaParametersContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters0" ):
                listener.enterLambdaParameters0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters0" ):
                listener.exitLambdaParameters0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters0" ):
                return visitor.visitLambdaParameters0(self)
            else:
                return visitor.visitChildren(self)


    class LambdaParameters1Context(LambdaParametersContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LambdaParametersContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParserLabeled.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters1" ):
                listener.enterLambdaParameters1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters1" ):
                listener.exitLambdaParameters1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters1" ):
                return visitor.visitLambdaParameters1(self)
            else:
                return visitor.visitChildren(self)


    class LambdaParameters2Context(LambdaParametersContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LambdaParametersContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.IDENTIFIER)
            else:
                return self.getToken(JavaParserLabeled.IDENTIFIER, i)
        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters2" ):
                listener.enterLambdaParameters2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters2" ):
                listener.exitLambdaParameters2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters2" ):
                return visitor.visitLambdaParameters2(self)
            else:
                return visitor.visitChildren(self)



    def lambdaParameters(self):

        localctx = JavaParserLabeled.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.LambdaParameters0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self.match(JavaParserLabeled.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.LambdaParameters1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FINAL) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.SHORT))) != 0) or _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                    self.state = 1225
                    self.formalParameterList()


                self.state = 1228
                self.match(JavaParserLabeled.RPAREN)
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.LambdaParameters2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1229
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1230
                self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParserLabeled.COMMA:
                    self.state = 1231
                    self.match(JavaParserLabeled.COMMA)
                    self.state = 1232
                    self.match(JavaParserLabeled.IDENTIFIER)
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1238
                self.match(JavaParserLabeled.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_lambdaBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LambdaBody0Context(LambdaBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LambdaBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody0" ):
                listener.enterLambdaBody0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody0" ):
                listener.exitLambdaBody0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody0" ):
                return visitor.visitLambdaBody0(self)
            else:
                return visitor.visitChildren(self)


    class LambdaBody1Context(LambdaBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.LambdaBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(JavaParserLabeled.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody1" ):
                listener.enterLambdaBody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody1" ):
                listener.exitLambdaBody1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody1" ):
                return visitor.visitLambdaBody1(self)
            else:
                return visitor.visitChildren(self)



    def lambdaBody(self):

        localctx = JavaParserLabeled.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lambdaBody)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.NEW, JavaParserLabeled.SHORT, JavaParserLabeled.SUPER, JavaParserLabeled.THIS, JavaParserLabeled.VOID, JavaParserLabeled.DECIMAL_LITERAL, JavaParserLabeled.HEX_LITERAL, JavaParserLabeled.OCT_LITERAL, JavaParserLabeled.BINARY_LITERAL, JavaParserLabeled.FLOAT_LITERAL, JavaParserLabeled.HEX_FLOAT_LITERAL, JavaParserLabeled.BOOL_LITERAL, JavaParserLabeled.CHAR_LITERAL, JavaParserLabeled.STRING_LITERAL, JavaParserLabeled.NULL_LITERAL, JavaParserLabeled.LPAREN, JavaParserLabeled.LT, JavaParserLabeled.BANG, JavaParserLabeled.TILDE, JavaParserLabeled.INC, JavaParserLabeled.DEC, JavaParserLabeled.ADD, JavaParserLabeled.SUB, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                localctx = JavaParserLabeled.LambdaBody0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1241
                self.expression(0)
                pass
            elif token in [JavaParserLabeled.LBRACE]:
                localctx = JavaParserLabeled.LambdaBody1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1242
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_primary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Primary6Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.NonWildcardTypeArgumentsContext,0)

        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExplicitGenericInvocationSuffixContext,0)

        def THIS(self):
            return self.getToken(JavaParserLabeled.THIS, 0)
        def arguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary6" ):
                listener.enterPrimary6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary6" ):
                listener.exitPrimary6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary6" ):
                return visitor.visitPrimary6(self)
            else:
                return visitor.visitChildren(self)


    class Primary2Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(JavaParserLabeled.SUPER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary2" ):
                listener.enterPrimary2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary2" ):
                listener.exitPrimary2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary2" ):
                return visitor.visitPrimary2(self)
            else:
                return visitor.visitChildren(self)


    class Primary3Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(JavaParserLabeled.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary3" ):
                listener.enterPrimary3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary3" ):
                listener.exitPrimary3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary3" ):
                return visitor.visitPrimary3(self)
            else:
                return visitor.visitChildren(self)


    class Primary4Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary4" ):
                listener.enterPrimary4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary4" ):
                listener.exitPrimary4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary4" ):
                return visitor.visitPrimary4(self)
            else:
                return visitor.visitChildren(self)


    class Primary5Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeTypeOrVoidContext,0)

        def DOT(self):
            return self.getToken(JavaParserLabeled.DOT, 0)
        def CLASS(self):
            return self.getToken(JavaParserLabeled.CLASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary5" ):
                listener.enterPrimary5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary5" ):
                listener.exitPrimary5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary5" ):
                return visitor.visitPrimary5(self)
            else:
                return visitor.visitChildren(self)


    class Primary0Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary0" ):
                listener.enterPrimary0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary0" ):
                listener.exitPrimary0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary0" ):
                return visitor.visitPrimary0(self)
            else:
                return visitor.visitChildren(self)


    class Primary1Context(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(JavaParserLabeled.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary1" ):
                listener.enterPrimary1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary1" ):
                listener.exitPrimary1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary1" ):
                return visitor.visitPrimary1(self)
            else:
                return visitor.visitChildren(self)



    def primary(self):

        localctx = JavaParserLabeled.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_primary)
        try:
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                localctx = JavaParserLabeled.Primary0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.match(JavaParserLabeled.LPAREN)
                self.state = 1246
                self.expression(0)
                self.state = 1247
                self.match(JavaParserLabeled.RPAREN)
                pass

            elif la_ == 2:
                localctx = JavaParserLabeled.Primary1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.match(JavaParserLabeled.THIS)
                pass

            elif la_ == 3:
                localctx = JavaParserLabeled.Primary2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                self.match(JavaParserLabeled.SUPER)
                pass

            elif la_ == 4:
                localctx = JavaParserLabeled.Primary3Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1251
                self.literal()
                pass

            elif la_ == 5:
                localctx = JavaParserLabeled.Primary4Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1252
                self.match(JavaParserLabeled.IDENTIFIER)
                pass

            elif la_ == 6:
                localctx = JavaParserLabeled.Primary5Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1253
                self.typeTypeOrVoid()
                self.state = 1254
                self.match(JavaParserLabeled.DOT)
                self.state = 1255
                self.match(JavaParserLabeled.CLASS)
                pass

            elif la_ == 7:
                localctx = JavaParserLabeled.Primary6Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1257
                self.nonWildcardTypeArguments()
                self.state = 1261
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParserLabeled.SUPER, JavaParserLabeled.IDENTIFIER]:
                    self.state = 1258
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [JavaParserLabeled.THIS]:
                    self.state = 1259
                    self.match(JavaParserLabeled.THIS)
                    self.state = 1260
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParserLabeled.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassType" ):
                return visitor.visitClassType(self)
            else:
                return visitor.visitChildren(self)




    def classType(self):

        localctx = JavaParserLabeled.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1265
                self.classOrInterfaceType()
                self.state = 1266
                self.match(JavaParserLabeled.DOT)


            self.state = 1273
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1270
                    self.annotation() 
                self.state = 1275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1276
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LT:
                self.state = 1277
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_creator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Creator1Context(CreatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.CreatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createdName(self):
            return self.getTypedRuleContext(JavaParserLabeled.CreatedNameContext,0)

        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArrayCreatorRestContext,0)

        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassCreatorRestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator1" ):
                listener.enterCreator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator1" ):
                listener.exitCreator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator1" ):
                return visitor.visitCreator1(self)
            else:
                return visitor.visitChildren(self)


    class Creator0Context(CreatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.CreatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.NonWildcardTypeArgumentsContext,0)

        def createdName(self):
            return self.getTypedRuleContext(JavaParserLabeled.CreatedNameContext,0)

        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassCreatorRestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator0" ):
                listener.enterCreator0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator0" ):
                listener.exitCreator0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator0" ):
                return visitor.visitCreator0(self)
            else:
                return visitor.visitChildren(self)



    def creator(self):

        localctx = JavaParserLabeled.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_creator)
        try:
            self.state = 1289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.LT]:
                localctx = JavaParserLabeled.Creator0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.nonWildcardTypeArguments()
                self.state = 1281
                self.createdName()
                self.state = 1282
                self.classCreatorRest()
                pass
            elif token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.SHORT, JavaParserLabeled.IDENTIFIER]:
                localctx = JavaParserLabeled.Creator1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.createdName()
                self.state = 1287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParserLabeled.LBRACK]:
                    self.state = 1285
                    self.arrayCreatorRest()
                    pass
                elif token in [JavaParserLabeled.LPAREN]:
                    self.state = 1286
                    self.classCreatorRest()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_createdName

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreatedName0Context(CreatedNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.CreatedNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.IDENTIFIER)
            else:
                return self.getToken(JavaParserLabeled.IDENTIFIER, i)
        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsOrDiamondContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.DOT)
            else:
                return self.getToken(JavaParserLabeled.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName0" ):
                listener.enterCreatedName0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName0" ):
                listener.exitCreatedName0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatedName0" ):
                return visitor.visitCreatedName0(self)
            else:
                return visitor.visitChildren(self)


    class CreatedName1Context(CreatedNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.CreatedNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParserLabeled.PrimitiveTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName1" ):
                listener.enterCreatedName1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName1" ):
                listener.exitCreatedName1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatedName1" ):
                return visitor.visitCreatedName1(self)
            else:
                return visitor.visitChildren(self)



    def createdName(self):

        localctx = JavaParserLabeled.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.IDENTIFIER]:
                localctx = JavaParserLabeled.CreatedName0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParserLabeled.LT:
                    self.state = 1292
                    self.typeArgumentsOrDiamond()


                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParserLabeled.DOT:
                    self.state = 1295
                    self.match(JavaParserLabeled.DOT)
                    self.state = 1296
                    self.match(JavaParserLabeled.IDENTIFIER)
                    self.state = 1298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParserLabeled.LT:
                        self.state = 1297
                        self.typeArgumentsOrDiamond()


                    self.state = 1304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.SHORT]:
                localctx = JavaParserLabeled.CreatedName1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)

        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParserLabeled.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerCreator" ):
                return visitor.visitInnerCreator(self)
            else:
                return visitor.visitChildren(self)




    def innerCreator(self):

        localctx = JavaParserLabeled.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.match(JavaParserLabeled.IDENTIFIER)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParserLabeled.LT:
                self.state = 1309
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1312
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LBRACK)
            else:
                return self.getToken(JavaParserLabeled.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.RBRACK)
            else:
                return self.getToken(JavaParserLabeled.RBRACK, i)

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArrayInitializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JavaParserLabeled.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(JavaParserLabeled.LBRACK)
            self.state = 1342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.RBRACK]:
                self.state = 1315
                self.match(JavaParserLabeled.RBRACK)
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParserLabeled.LBRACK:
                    self.state = 1316
                    self.match(JavaParserLabeled.LBRACK)
                    self.state = 1317
                    self.match(JavaParserLabeled.RBRACK)
                    self.state = 1322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1323
                self.arrayInitializer()
                pass
            elif token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.NEW, JavaParserLabeled.SHORT, JavaParserLabeled.SUPER, JavaParserLabeled.THIS, JavaParserLabeled.VOID, JavaParserLabeled.DECIMAL_LITERAL, JavaParserLabeled.HEX_LITERAL, JavaParserLabeled.OCT_LITERAL, JavaParserLabeled.BINARY_LITERAL, JavaParserLabeled.FLOAT_LITERAL, JavaParserLabeled.HEX_FLOAT_LITERAL, JavaParserLabeled.BOOL_LITERAL, JavaParserLabeled.CHAR_LITERAL, JavaParserLabeled.STRING_LITERAL, JavaParserLabeled.NULL_LITERAL, JavaParserLabeled.LPAREN, JavaParserLabeled.LT, JavaParserLabeled.BANG, JavaParserLabeled.TILDE, JavaParserLabeled.INC, JavaParserLabeled.DEC, JavaParserLabeled.ADD, JavaParserLabeled.SUB, JavaParserLabeled.AT, JavaParserLabeled.IDENTIFIER]:
                self.state = 1324
                self.expression(0)
                self.state = 1325
                self.match(JavaParserLabeled.RBRACK)
                self.state = 1332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1326
                        self.match(JavaParserLabeled.LBRACK)
                        self.state = 1327
                        self.expression(0)
                        self.state = 1328
                        self.match(JavaParserLabeled.RBRACK) 
                    self.state = 1334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                self.state = 1339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1335
                        self.match(JavaParserLabeled.LBRACK)
                        self.state = 1336
                        self.match(JavaParserLabeled.RBRACK) 
                    self.state = 1341
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCreatorRest" ):
                return visitor.visitClassCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def classCreatorRest(self):

        localctx = JavaParserLabeled.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.arguments()
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1345
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocation" ):
                return visitor.visitExplicitGenericInvocation(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocation(self):

        localctx = JavaParserLabeled.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.nonWildcardTypeArguments()
            self.state = 1349
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParserLabeled.LT, 0)

        def GT(self):
            return self.getToken(JavaParserLabeled.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentsOrDiamond" ):
                return visitor.visitTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParserLabeled.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.match(JavaParserLabeled.LT)
                self.state = 1352
                self.match(JavaParserLabeled.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParserLabeled.LT, 0)

        def GT(self):
            return self.getToken(JavaParserLabeled.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArgumentsOrDiamond" ):
                return visitor.visitNonWildcardTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParserLabeled.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1356
                self.match(JavaParserLabeled.LT)
                self.state = 1357
                self.match(JavaParserLabeled.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParserLabeled.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParserLabeled.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParserLabeled.GT, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArguments" ):
                return visitor.visitNonWildcardTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParserLabeled.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(JavaParserLabeled.LT)
            self.state = 1362
            self.typeList()
            self.state = 1363
            self.match(JavaParserLabeled.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JavaParserLabeled.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.typeType()
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 1366
                self.match(JavaParserLabeled.COMMA)
                self.state = 1367
                self.typeType()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParserLabeled.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParserLabeled.PrimitiveTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.LBRACK)
            else:
                return self.getToken(JavaParserLabeled.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.RBRACK)
            else:
                return self.getToken(JavaParserLabeled.RBRACK, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeType" ):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)




    def typeType(self):

        localctx = JavaParserLabeled.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1373
                    self.annotation() 
                self.state = 1378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

            self.state = 1381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.IDENTIFIER]:
                self.state = 1379
                self.classOrInterfaceType()
                pass
            elif token in [JavaParserLabeled.BOOLEAN, JavaParserLabeled.BYTE, JavaParserLabeled.CHAR, JavaParserLabeled.DOUBLE, JavaParserLabeled.FLOAT, JavaParserLabeled.INT, JavaParserLabeled.LONG, JavaParserLabeled.SHORT]:
                self.state = 1380
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1393
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==JavaParserLabeled.AT or _la==JavaParserLabeled.IDENTIFIER:
                        self.state = 1383
                        self.annotation()
                        self.state = 1388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1389
                    self.match(JavaParserLabeled.LBRACK)
                    self.state = 1390
                    self.match(JavaParserLabeled.RBRACK) 
                self.state = 1395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParserLabeled.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParserLabeled.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParserLabeled.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParserLabeled.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParserLabeled.INT, 0)

        def LONG(self):
            return self.getToken(JavaParserLabeled.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParserLabeled.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParserLabeled.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JavaParserLabeled.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.SHORT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParserLabeled.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParserLabeled.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParserLabeled.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParserLabeled.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParserLabeled.COMMA)
            else:
                return self.getToken(JavaParserLabeled.COMMA, i)

        def getRuleIndex(self):
            return JavaParserLabeled.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JavaParserLabeled.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(JavaParserLabeled.LT)
            self.state = 1399
            self.typeArgument()
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParserLabeled.COMMA:
                self.state = 1400
                self.match(JavaParserLabeled.COMMA)
                self.state = 1401
                self.typeArgument()
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1407
            self.match(JavaParserLabeled.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_superSuffix

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SuperSuffix1Context(SuperSuffixContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.SuperSuffixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(JavaParserLabeled.DOT, 0)
        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)
        def arguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix1" ):
                listener.enterSuperSuffix1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix1" ):
                listener.exitSuperSuffix1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperSuffix1" ):
                return visitor.visitSuperSuffix1(self)
            else:
                return visitor.visitChildren(self)


    class SuperSuffix0Context(SuperSuffixContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.SuperSuffixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix0" ):
                listener.enterSuperSuffix0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix0" ):
                listener.exitSuperSuffix0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperSuffix0" ):
                return visitor.visitSuperSuffix0(self)
            else:
                return visitor.visitChildren(self)



    def superSuffix(self):

        localctx = JavaParserLabeled.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_superSuffix)
        try:
            self.state = 1415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.LPAREN]:
                localctx = JavaParserLabeled.SuperSuffix0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1409
                self.arguments()
                pass
            elif token in [JavaParserLabeled.DOT]:
                localctx = JavaParserLabeled.SuperSuffix1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1410
                self.match(JavaParserLabeled.DOT)
                self.state = 1411
                self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 1413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1412
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_explicitGenericInvocationSuffix

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplicitGenericInvocationSuffix0Context(ExplicitGenericInvocationSuffixContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExplicitGenericInvocationSuffixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(JavaParserLabeled.SUPER, 0)
        def superSuffix(self):
            return self.getTypedRuleContext(JavaParserLabeled.SuperSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix0" ):
                listener.enterExplicitGenericInvocationSuffix0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix0" ):
                listener.exitExplicitGenericInvocationSuffix0(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocationSuffix0" ):
                return visitor.visitExplicitGenericInvocationSuffix0(self)
            else:
                return visitor.visitChildren(self)


    class ExplicitGenericInvocationSuffix1Context(ExplicitGenericInvocationSuffixContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParserLabeled.ExplicitGenericInvocationSuffixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(JavaParserLabeled.IDENTIFIER, 0)
        def arguments(self):
            return self.getTypedRuleContext(JavaParserLabeled.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix1" ):
                listener.enterExplicitGenericInvocationSuffix1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix1" ):
                listener.exitExplicitGenericInvocationSuffix1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocationSuffix1" ):
                return visitor.visitExplicitGenericInvocationSuffix1(self)
            else:
                return visitor.visitChildren(self)



    def explicitGenericInvocationSuffix(self):

        localctx = JavaParserLabeled.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParserLabeled.SUPER]:
                localctx = JavaParserLabeled.ExplicitGenericInvocationSuffix0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1417
                self.match(JavaParserLabeled.SUPER)
                self.state = 1418
                self.superSuffix()
                pass
            elif token in [JavaParserLabeled.IDENTIFIER]:
                localctx = JavaParserLabeled.ExplicitGenericInvocationSuffix1Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self.match(JavaParserLabeled.IDENTIFIER)
                self.state = 1420
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParserLabeled.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParserLabeled.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParserLabeled.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParserLabeled.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JavaParserLabeled.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.match(JavaParserLabeled.LPAREN)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParserLabeled.BOOLEAN) | (1 << JavaParserLabeled.BYTE) | (1 << JavaParserLabeled.CHAR) | (1 << JavaParserLabeled.DOUBLE) | (1 << JavaParserLabeled.FLOAT) | (1 << JavaParserLabeled.INT) | (1 << JavaParserLabeled.LONG) | (1 << JavaParserLabeled.NEW) | (1 << JavaParserLabeled.SHORT) | (1 << JavaParserLabeled.SUPER) | (1 << JavaParserLabeled.THIS) | (1 << JavaParserLabeled.VOID) | (1 << JavaParserLabeled.DECIMAL_LITERAL) | (1 << JavaParserLabeled.HEX_LITERAL) | (1 << JavaParserLabeled.OCT_LITERAL) | (1 << JavaParserLabeled.BINARY_LITERAL) | (1 << JavaParserLabeled.FLOAT_LITERAL) | (1 << JavaParserLabeled.HEX_FLOAT_LITERAL) | (1 << JavaParserLabeled.BOOL_LITERAL) | (1 << JavaParserLabeled.CHAR_LITERAL) | (1 << JavaParserLabeled.STRING_LITERAL) | (1 << JavaParserLabeled.NULL_LITERAL) | (1 << JavaParserLabeled.LPAREN))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (JavaParserLabeled.LT - 72)) | (1 << (JavaParserLabeled.BANG - 72)) | (1 << (JavaParserLabeled.TILDE - 72)) | (1 << (JavaParserLabeled.INC - 72)) | (1 << (JavaParserLabeled.DEC - 72)) | (1 << (JavaParserLabeled.ADD - 72)) | (1 << (JavaParserLabeled.SUB - 72)) | (1 << (JavaParserLabeled.AT - 72)) | (1 << (JavaParserLabeled.IDENTIFIER - 72)))) != 0):
                self.state = 1424
                self.expressionList()


            self.state = 1427
            self.match(JavaParserLabeled.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[83] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         




