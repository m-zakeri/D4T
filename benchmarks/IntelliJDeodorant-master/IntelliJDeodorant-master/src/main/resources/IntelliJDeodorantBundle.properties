intellijdeodorant=IntelliJDeodorant
scope.all.files=All Files
scope.opened.files=Opened Files
scope.current.file=Current File
method.column.title=Method
move.to.column.title=Move to
dependencies.column.title=Source/Target accessed members
select.all.button=Select all
refactor.button=Refactor
refresh.button=Refresh
advanced.settings=Advanced settings
java.member.is.not.valid=Java method is not valid anymore
press.refresh.to.find.refactoring.opportunities=Press Refresh button to search for refactoring opportunities
target.class.is.not.valid=Target class is not valid anymore
feature.envy.smell.name=Feature Envy
feature.envy.detect.indicator.status=Detecting Feature Envy smells
feature.envy.parsing.indicator=Parsing Java project
feature.envy.identification.indicator=Identifying Move Method refactoring opportunities
long.method.smell.name=Long Method
long.method.detect.indicator.status=Identifying Extract Method refactoring opportunities
long.method.panel.source.method=Source method
long.method.panel.variable.name=Variable name
extract.method.refactoring.name=Extract Method
report.error.progress.dialog.text=Submitting error report
report.error.to.plugin.vendor=Report to IntelliJDeodorant GitHub Issue Tracker
git.issue.text=<a href="{0}">Created issue {1}</a>. Thank you for your feedback! \n \
  Make sure you have the latest version of the plugin.
git.issue.duplicate.text=<a href="{0}">Similar issues were already reported (#{1})</a>. \n \
  Thank you for your feedback! Make sure you have the latest version of the plugin.
report.error.connection.failure=Could not connect to GitHub.\n\
  Please <a href="{0}">open an issue</a>.
project.compiling.indicator.text=Compiling project
compilation.error.notification.text=Compilation errors were detected in the project. Please fix the errors before using IntelliJDeodorant.
god.class.smell.name=God Class
god.class.identification.indicator=Identifying Extract Class refactoring opportunities
god.class.identification.indicator.preconditions=Checking preconditions
god.class.panel.source.class=Source Class/General concept
god.class.panel.extractable.concept=Extractable concept
god.class.panel.source.extracted.members=Source/Extracted accessed members
god.class.dialog.title=Extract Class refactoring
god.class.dialog.class.name.not.valid=The class name is invalid
god.class.dialog.class.name.already.exists=The class with the same name already exists in the package
god.class.dialog.class.name.already.exists.javalang=The class with the same name already exists in package java.lang
god.class.preview.updated.extracted.method.invocation=Updated method invocation
god.class.preview.updated.extracted.field.access=Updated field access
god.class.preview.updated.extracted.field.assigment=Updated field assigment
god.class.preview.create.field.holding.reference=Create field holding a reference to the extracted class
god.class.preview.initialise.extracted.field=Initialize extracted field
god.class.preview.leave.delegate=Leave delegate for extracted method
god.class.preview.remove.extracted.field=Remove extracted field
god.class.preview.remove.extracted.method=Remove extracted method
god.class.preview.create.setter=Create setter method for field
god.class.preview.create.getter=Create getter method for field
god.class.preview.changed.access.to.public=Changed access level to public
god.class.preview.initialise.field.holding.reference=Initialise field holding a reference to the extracted class
god.class.preview.update.write.object=Update writeObject()
god.class.preview.create.write.object=Create writeObject()
god.class.preview.update.read.object=Update readObject()
god.class.preview.create.read.object=Create readObject()
god.class.preview.update.clone=Update clone()
god.class.preview.create.clone=Create clone()
god.class.preview.updated.method=Updated method
god.class.preview.updates.source.class=Updated source class
god.class.preview.created.extracted.class=Created extracted class
god.class.preview.new.class.name= Name for new class
god.class.name=Extract Class
export=Export
type.state.checking.identification.indicator=Identifying Type Checking code smells
type.state.checking.smell.name=Type-State checking
type.state.checking.panel.column.method=Type Checking method
type.state.checking.panel.column.refactoring.type=Refactoring type
type.state.checking.panel.column.system.occurrences=System-level occurrences
type.state.checking.panel.column.class.occurrences=Class-level occurrences
type.state.checking.panel.column.average.statements=Average number of statements per case
replace.type.code.with.state.strategy.name=Replace Type Code with State/Strategy
replace.type.code.with.state.strategy.dialog.error.invalid=The type name is invalid
replace.type.code.with.state.strategy.dialog.error.exists.package=A type with this name already exists in the package
replace.type.code.with.state.strategy.dialog.error.exists.javalang=A type with this name already exists in package java.lang
replace.type.code.with.state.strategy.dialog.error.chosen=This name is already taken
replace.type.code.with.state.strategy.restore.title=Restore defaults
replace.type.code.with.state.strategy.state.variable=State variable:
replace.type.code.with.state.strategy.abstract.state.strategy.type.name=Abstract State/Strategy type name:
replace.type.code.with.state.strategy.named.constants=Named constants:
replace.type.code.with.state.strategy.concrete.state.strategy.type.name=Concrete State/Strategy type names:
replace.conditional.with.polymorphism.name=Replace Conditional with Polymorphism