// This installs dependencyUpdates plugin
// Run gradle dependencyUpdates to get the report

apply plugin: 'java'
apply plugin: 'eclipse'

// Path to launch4j binary
ext.launch4j = '/opt/launch4j/launch4j'
// Directories where we build the distro
ext.distBinDir = file('dist-bin')
ext.pluginsVersion = file("dist-bin/plugins/VERSION")
ext.pluginsDir = file("dist-bin/plugins/${semver}")

archivesBaseName = 'ganttproject'
version = "${rootProject.version}"

ant.importBuild 'build.xml'
ant.properties.distBin = 'dist-bin'
ant.properties.distDebWork = "deb"
ant.properties.distDebPackage = "${rootProject.buildDir}/distributions"
//ant.properties.distMacWork = 'dist-mac'
//ant.properties.distMacZip = "${rootProject.buildDir}/distributions/ganttproject.app-${version}.zip"
ant.properties.version = "${rootProject.version}"
ant.properties.version_build = "${rootProject.version}"


def devNull = new OutputStream() {
    @Override
    public void write(int b) {}
}

clean {
    delete += "dist-bin"
}

task distBin(dependsOn: [
        ':biz.ganttproject.app.libs:copyPlugin',
        ':biz.ganttproject.app.localization:copyPlugin',
        ':biz.ganttproject.core:copyPlugin',
        ':ganttproject:copyPlugin',
        ':biz.ganttproject.impex.ical:copyPlugin',
        ':biz.ganttproject.impex.msproject2:copyPlugin',
        ':org.ganttproject.chart.pert:copyPlugin',
        ':org.ganttproject.impex.htmlpdf:copyPlugin'
    ]) {
    println "===== Building GanttProject ${version} ====="
    println "===== Building generic binary distro ====="
    doLast {
        copy {
            into(rootProject.distBinDir)
            from(fileTree(".")) {
                include "lib/javagalician.jar"
                include "ganttproject.bat"
                include "ganttproject.exe"
                include "HouseBuildingSample.gan"
                include "LICENSE"
                include "logback.xml"
                include "logging.properties"
            }
        }
        copy {
            into(rootProject.distBinDir)
            from project(":ganttproject").rootDir
            include "lib/core/eclipsito.jar"
        }
        copy {
            into(rootProject.distBinDir)
            from(fileTree(".")) {
                include "ganttproject"
                include "ganttproject.command"
            }
            fileMode 0755
        }
        copy {
            into(rootProject.pluginsDir)
            from(fileTree(".")) {
                include "VERSION"
            }
        }
        delete fileTree(rootProject.distBinDir).matching {
            include "**/javafx**.jar.lib"
        }
    }
}

task distZip(type: Zip, dependsOn: distBin) {
    from 'dist-bin'
    into archivesBaseName + '-' + version
}

task distWin(dependsOn: distBin) {
    doLast {
        println '======== Building Windows Installer ========'
        println '= Generating NSIS script ...'
//        exec {
//            workingDir '.'
//            commandLine './gen-nsis', semver, version
//        }

//        println '= Generating ganttproject.exe with launch4j ...'
//        exec {
//            workingDir '.'
//            commandLine launch4j, 'ganttproject-launch4j.xml'
//            standardOutput = devNull
//        }
        println '= Copying required files to dist-win...'
        copy {
            from 'dist-bin'
            into 'dist-win'
            include '**'
        }
        copy {
            from '.'
            into 'dist-win'
            include "ganttproject.l4j.ini"
            include 'ganttproject.nsi.tpl'
            include "ganttproject_16.ico"
            include "ganttproject.ico"
            rename 'ganttproject.nsi.tpl', 'ganttproject.nsi'
        }
        copy {
            from '.'
            into 'dist-win'
            include 'runtime/**'
        }
//        println '= Building installer...'
//        exec {
//            workingDir 'dist-win'
//            commandLine 'makensis', 'ganttproject.nsi'
//            standardOutput = devNull
//        }
//        copy {
//            from 'dist-win'
//            into new File(buildDir, '/distributions')
//            include "ganttproject-${version}.exe"
//        }
//        println "===== Windows installer is ready in ${buildDir}/distributions ====="
    }
}

task distDebPre {
    doFirst {
        copy {
            into 'deb/usr/share/doc/ganttproject'
            from(rootProject.projectDir) {
                include "AUTHORS"
                include "CHANGELOG"
                include "README"
            }
        }
        exec {
            commandLine "gzip"
            args "-n", "-f", "deb/usr/share/doc/ganttproject/CHANGELOG"
        }
        exec {
            commandLine "mv"
            args "deb/usr/share/doc/ganttproject/CHANGELOG.gz", "deb/usr/share/doc/ganttproject/changelog.Debian.gz"
        }
    }
}

task runApp(type: JavaExec, dependsOn: distBin) {
    workingDir = 'dist-bin'
    classpath = (fileTree(dir: 'dist-bin', includes: ['eclipsito.jar']) + files('dist-bin'))
    main = 'com.bardsoftware.eclipsito.Launch'
    args '--verbosity', '4', '--app', 'net.sourceforge.ganttproject.GanttProject', '--version-dirs', "plugins"
    jvmArgs '-ea'
}
task debugApp(type: JavaExec, dependsOn: distBin) {
    workingDir = 'dist-bin'
    classpath = (fileTree(dir: 'dist-bin', includes: ['eclipsito.jar']) + files('dist-bin'))
    main = 'com.bardsoftware.eclipsito.Launch'
    args '--verbosity', '4', '--app', 'net.sourceforge.ganttproject.GanttProject', '--version-dirs', "plugins"
    jvmArgs '-agentlib:jdwp=transport=dt_socket,address=localhost:9009,server=y,suspend=y'
}

