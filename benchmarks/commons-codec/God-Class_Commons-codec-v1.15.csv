org.apache.commons.codec.digest.XXHash32	[org.apache.commons.codec.digest.XXHash32::int[] state, org.apache.commons.codec.digest.XXHash32::int seed, org.apache.commons.codec.digest.XXHash32::initializeState():void, org.apache.commons.codec.digest.XXHash32::process(byte[], int):void, org.apache.commons.codec.digest.XXHash32::boolean stateUpdated]
org.apache.commons.codec.digest.Blake3.EngineState	[org.apache.commons.codec.digest.Blake3.EngineState::int[][] cvStack, org.apache.commons.codec.digest.Blake3.EngineState::int stackLen, org.apache.commons.codec.digest.Blake3.EngineState::pushCV(int[]):void, org.apache.commons.codec.digest.Blake3.EngineState::popCV():int[]]
org.apache.commons.codec.net.PercentCodec	[org.apache.commons.codec.net.PercentCodec::int alwaysEncodeCharsMin, org.apache.commons.codec.net.PercentCodec::int alwaysEncodeCharsMax, org.apache.commons.codec.net.PercentCodec::inAlwaysEncodeCharsRange(byte):boolean]
org.apache.commons.codec.net.PercentCodec	[org.apache.commons.codec.net.PercentCodec::java.util.BitSet alwaysEncodeChars, org.apache.commons.codec.net.PercentCodec::insertAlwaysEncodeChar(byte):void, org.apache.commons.codec.net.PercentCodec::int alwaysEncodeCharsMin, org.apache.commons.codec.net.PercentCodec::int alwaysEncodeCharsMax, org.apache.commons.codec.net.PercentCodec::inAlwaysEncodeCharsRange(byte):boolean, org.apache.commons.codec.net.PercentCodec::canEncode(byte):boolean, org.apache.commons.codec.net.PercentCodec::insertAlwaysEncodeChars(byte[]):void, org.apache.commons.codec.net.PercentCodec::expectedEncodingBytes(byte[]):int]
org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule	[org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule::java.lang.String pattern, org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule::getPatternLength():int, org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule::matches(java.lang.String):boolean]
org.apache.commons.codec.language.bm.PhoneticEngine	[org.apache.commons.codec.language.bm.PhoneticEngine::org.apache.commons.codec.language.bm.NameType nameType, org.apache.commons.codec.language.bm.PhoneticEngine::org.apache.commons.codec.language.bm.RuleType ruleType, org.apache.commons.codec.language.bm.PhoneticEngine::boolean concat, org.apache.commons.codec.language.bm.PhoneticEngine::int maxPhonemes, org.apache.commons.codec.language.bm.PhoneticEngine::applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder, java.util.Map<java.lang.String,java.util.List<org.apache.commons.codec.language.bm.Rule>>):org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder, org.apache.commons.codec.language.bm.PhoneticEngine::encode(java.lang.String, org.apache.commons.codec.language.bm.Languages.LanguageSet):java.lang.String]
org.apache.commons.codec.cli.Digest	[org.apache.commons.codec.cli.Digest::java.lang.String[] inputs, org.apache.commons.codec.cli.Digest::run(java.lang.String, java.security.MessageDigest):void, org.apache.commons.codec.cli.Digest::run(java.lang.String, java.security.MessageDigest, java.io.File[]):void, org.apache.commons.codec.cli.Digest::println(java.lang.String, byte[], java.lang.String):void]
